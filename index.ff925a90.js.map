{"mappings":"AEAA,MAAM,EACJ,wEAEI,EAAW,4BAEX,EAAM,GAAG,uBAAgC,GAAS,C,I,E,C,EEJW,EAAiB,AAG1E,WAEN,SAAS,IACL,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,EAAG,GACnD,CAwBA,SAAS,EAAS,CAAI,CAAE,EAAO,EAAE,CAAE,EAAY,CAAA,CAAK,EAChD,IAAI,EACJ,OAAO,SAAU,GAAG,CAAI,EACpB,IAAM,EAAU,KAOV,EAAU,GAAa,CAAC,EAC9B,aAAa,GACb,EAAU,WARI,KACV,EAAU,KACL,GACD,EAAK,KAAK,CAAC,EAAS,EAE5B,EAG4B,GACxB,GACA,EAAK,KAAK,CAAC,EAAS,EAE5B,CACJ,CACA,SAAS,EAAQ,CAAC,CAAE,CAAC,EACjB,OAAO,KAAK,SAAS,CAAC,KAAO,KAAK,SAAS,CAAC,EAChD,CAMA,MAAM,EACF,YAAY,CAAQ,CAAE,CAClB,IAAI,CAAC,EAAE,CAAG,GACV,IAAI,CAAC,KAAK,CAAG,GACb,IAAI,CAAC,KAAK,CAAG,EAAE,CACf,IAAI,CAAC,UAAU,CAAG,CAAA,EAClB,IAAI,CAAC,MAAM,CAAG,CAAA,EACd,IAAI,CAAC,UAAU,CAAG,CAAA,EAClB,IAAI,CAAC,YAAY,CAAG,KACf,GACD,CAAA,EAAW,CAAC,CAAA,EAEhB,IAAI,CAAC,EAAE,CAAG,MAAQ,IAClB,IAAI,CAAC,KAAK,CAAG,EAAS,KAAK,EAAI,GAC/B,IAAI,CAAC,KAAK,CAAG,EAAS,KAAK,EAAI,EAAE,CACjC,IAAI,CAAC,QAAQ,CAAG,AAAsB,KAAA,IAAtB,EAAS,QAAQ,EAAiB,EAAS,QAAQ,CACnE,IAAI,CAAC,UAAU,CAAG,AAAwB,KAAA,IAAxB,EAAS,UAAU,EAAiB,EAAS,UAAU,CACzE,IAAI,CAAC,UAAU,CAAG,AAAwB,KAAA,IAAxB,EAAS,UAAU,EAAiB,EAAS,UAAU,CACzE,IAAI,CAAC,SAAS,CAAG,EAAS,SAAS,EAAI,WACvC,IAAI,CAAC,iBAAiB,CAAG,EAAS,iBAAiB,EAAI,SACvD,IAAI,CAAC,UAAU,CAAG,EAAS,UAAU,EAAI,aACzC,IAAI,CAAC,aAAa,CAAG,EAAS,aAAa,EAAI,eAC/C,IAAI,CAAC,eAAe,CAAG,AAA6B,KAAA,IAA7B,EAAS,eAAe,EAAiB,EAAS,eAAe,CACxF,IAAI,CAAC,aAAa,CAAG,AAA2B,KAAA,IAA3B,EAAS,aAAa,EAAiB,EAAS,aAAa,CAClF,IAAI,CAAC,eAAe,CAAG,EAAS,eAAe,EAAI,SAAS,IAAI,CAChE,IAAI,CAAC,eAAe,CAAG,EAAS,eAAe,EAAI,WACnD,IAAI,CAAC,YAAY,CAAG,EAAS,YAAY,EAAI,OAC7C,IAAI,CAAC,eAAe,CAAG,AAA6B,KAAA,IAA7B,EAAS,eAAe,CAAiB,EAAS,eAAe,CAAG,eAC3F,IAAI,CAAC,aAAa,CAAG,AAA2B,KAAA,IAA3B,EAAS,aAAa,EAAiB,EAAS,aAAa,CAClF,IAAI,CAAC,YAAY,CAAG,AAA0B,KAAA,IAA1B,EAAS,YAAY,EAAiB,EAAS,YAAY,CAC/E,IAAI,CAAC,kBAAkB,CAAG,AAAgC,KAAA,IAAhC,EAAS,kBAAkB,EAAiB,EAAS,kBAAkB,CACjG,IAAI,CAAC,WAAW,CAAG,EAAS,WAAW,EAAI,EAC3C,IAAI,CAAC,WAAW,CAAG,EAAS,WAAW,EAAI,IAC3C,IAAI,CAAC,YAAY,CAAG,EAAS,YAAY,EAAI,IAC7C,IAAI,CAAC,cAAc,CAAG,EAAS,cAAc,EAAI,GACjD,IAAI,CAAC,gBAAgB,CAAG,EAAS,gBAAgB,EAAI,mBACzD,CACJ,CAEA,MAAM,EACF,YAAY,CAAQ,CAAE,CAOlB,GANA,IAAI,CAAC,EAAE,CAAG,AAAC,EAAS,EAAE,EAAI,AAAgB,KAAhB,EAAS,EAAE,CAAyB,EAAS,EAAE,CAA1B,IAC/C,IAAI,CAAC,KAAK,CAAG,EAAS,KAAK,EAAI,GAC/B,IAAI,CAAC,SAAS,CAAG,AAAuB,KAAA,IAAvB,EAAS,SAAS,EAAyB,EAAS,SAAS,CAC9E,IAAI,CAAC,aAAa,CAAG,EAAS,aAAa,EAAI,aAC/C,IAAI,CAAC,QAAQ,CAAG,EAAS,QAAQ,EAAI,MACrC,IAAI,CAAC,OAAO,CAAG,EAAE,CACb,EAAS,OAAO,CAChB,IAAK,IAAM,KAAK,EAAS,OAAO,CAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAO,GAGzC,CACJ,CACA,MAAM,EACF,YAAY,CAAM,CAAE,CAChB,IAAI,CAAC,EAAE,CAAG,AAAC,EAAO,EAAE,EAAI,AAAc,KAAd,EAAO,EAAE,CAAyB,EAAO,EAAE,CAAxB,IAC3C,IAAI,CAAC,KAAK,CAAG,AAAiB,KAAA,IAAjB,EAAO,KAAK,CAAiB,EAAO,IAAI,CAAG,EAAO,KAAK,CACpE,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,EAAI,GAC3B,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,EAAI,GAC3B,IAAI,CAAC,QAAQ,CAAG,AAAoB,KAAA,IAApB,EAAO,QAAQ,EAAiB,EAAO,QAAQ,CAC/D,IAAI,CAAC,OAAO,CAAG,AAAmB,KAAA,IAAnB,EAAO,OAAO,EAAiB,EAAO,OAAO,CAC5D,IAAI,CAAC,QAAQ,CAAG,AAAoB,KAAA,IAApB,EAAO,QAAQ,EAAiB,EAAO,QAAQ,CAC/D,IAAI,CAAC,SAAS,CAAG,AAAqB,KAAA,IAArB,EAAO,SAAS,EAAiB,EAAO,SAAS,CAClE,IAAI,CAAC,WAAW,CAAG,AAAuB,KAAA,IAAvB,EAAO,WAAW,EAAiB,EAAO,WAAW,CACxE,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,EAAI,GAC7B,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,EAAI,GAC7B,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,EAAI,CAAC,CAChC,CACJ,CACA,MAAM,EACF,YAAY,CAAI,CAAE,CAAI,CAAE,CACpB,IAAI,CAAC,UAAU,CAAG,SAClB,IAAI,CAAC,IAAI,CAAG,EAAE,CACd,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,OAAO,CAAC,EACjB,CACA,kBAAkB,CAAI,CAAE,CACpB,GAAI,CAAC,MAAM,OAAO,CAAC,GACf,OAAO,AAAI,MAAM,yBAErB,IAAK,IAAI,KAAW,EAChB,GAAI,aAAmB,GAAY,UAAW,EAAS,CACnD,GAAI,CAAE,CAAA,UAAW,CAAA,EACb,OAAO,AAAI,MAAM,8BAErB,GAAI,YAAa,GAAW,EAAQ,OAAO,CACvC,IAAK,IAAI,KAAU,EAAQ,OAAO,CAC9B,OAAO,IAAI,CAAC,cAAc,CAAC,EAGvC,MACK,GAAI,aAAmB,GAAU,SAAU,EAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,QAG3B,OAAO,AAAI,MAAM,kDAGzB,OAAO,IACX,CACA,eAAe,CAAM,CAAE,OACnB,AAAM,SAAU,EAGT,KAFI,AAAI,MAAM,0BAGzB,CACA,kBAAkB,CAAI,CAAE,CACpB,IAAI,EAAY,EAAE,CAiBlB,OAhBA,EAAK,OAAO,CAAC,AAAC,IACV,GAAI,aAAmB,GAAY,UAAW,EAAS,CACnD,IAAI,EAAa,EAAE,AACf,CAAA,YAAa,GAAW,EAAQ,OAAO,EACvC,EAAQ,OAAO,CAAC,OAAO,CAAC,AAAC,IACrB,EAAW,IAAI,CAAC,IAAI,EAAO,GAC/B,GAEA,EAAW,MAAM,CAAG,GACpB,EAAU,IAAI,CAAC,IAAI,EAAS,GAEpC,CACI,CAAA,aAAmB,GAAU,SAAU,CAAA,GACvC,EAAU,IAAI,CAAC,IAAI,EAAO,GAElC,GACO,CACX,CACA,QAAQ,CAAI,CAAE,CACV,IAAI,CAAC,IAAI,CAAG,IAAI,CAAC,iBAAiB,CAAC,GACX,WAApB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,aAAa,CAAC,QAAS,IAAI,CAAC,WAAW,GAEpD,CACA,SAAU,CACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAM,CAAA,EAC7B,CACA,gBAAiB,CACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAM,CAAA,EAC7B,CACA,UAAU,CAAM,CAAE,CACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,EAAO,IAClD,CACA,cAAc,CAAY,CAAE,CAAc,CAAE,CACxC,IAAI,EAAc,KACd,EAAc,CAAA,EAClB,IAAK,IAAI,KAAW,IAAI,CAAC,IAAI,CAAE,CAC3B,GAAI,aAAmB,EACnB,IAAK,IAAI,KAAU,EAAQ,OAAO,CACzB,GACD,CAAA,EAAc,CADlB,EAGA,EAAO,QAAQ,CAAG,CAAA,GAAsB,EAAe,QAAQ,CAAC,CAAM,CAAC,EAAa,EAChF,EAAO,QAAQ,EAAI,AAAoB,WAApB,IAAI,CAAC,UAAU,EAClC,CAAA,EAAc,CAAA,CADlB,EAKJ,aAAmB,IACd,GACD,CAAA,EAAc,CADlB,EAGA,EAAQ,QAAQ,CAAG,CAAA,GAAsB,EAAe,QAAQ,CAAC,CAAO,CAAC,EAAa,EAClF,EAAQ,QAAQ,EAAI,AAAoB,WAApB,IAAI,CAAC,UAAU,EACnC,CAAA,EAAc,CAAA,CADlB,EAIR,CACwB,WAApB,IAAI,CAAC,UAAU,EAAiB,GAAe,CAAC,GAChD,CAAA,EAAY,QAAQ,CAAG,CAAA,CAD3B,CAGJ,CACA,aAAc,CACV,IAAI,EAAkB,IAAI,CAAC,kBAAkB,GACzC,EAAiB,EAAE,CAIvB,OAHA,EAAgB,OAAO,CAAC,AAAC,IACrB,EAAe,IAAI,CAAC,EAAO,KAAK,CACpC,GACO,CACX,CACA,oBAAqB,CACjB,OAAO,IAAI,CAAC,MAAM,CAAC,AAAC,GACT,EAAI,QAAQ,CACpB,CAAA,EACP,CACA,gBAAiB,CACb,IAAI,EAAkB,IAAI,CAAC,kBAAkB,GACzC,EAAc,EAAE,CAIpB,OAHA,EAAgB,OAAO,CAAC,AAAC,IACrB,EAAY,IAAI,CAAC,EAAG,EAAE,CAC1B,GACO,CACX,CACA,gBAAgB,CAAE,CAAE,CAChB,IAAK,IAAI,KAAW,IAAI,CAAC,IAAI,CACzB,GAAI,aAAmB,GAAY,EAAQ,EAAE,GAAK,EAC9C,OAAO,EAGf,OAAO,IACX,CACA,cAAc,CAAE,CAAE,CACd,IAAI,EAAU,IAAI,CAAC,MAAM,CAAC,AAAC,GAChB,EAAI,EAAE,GAAK,EACnB,CAAA,GACH,OAAO,EAAQ,MAAM,CAAG,CAAO,CAAC,EAAE,CAAG,IACzC,CACA,eAAgB,CACZ,OAAO,IAAI,CAAC,UAAU,AAC1B,CACA,gBAAiB,CACb,IAAI,EAAS,KACb,IAAK,IAAI,KAAW,IAAI,CAAC,IAAI,CAOzB,GANI,aAAmB,EACnB,EAAS,EAAQ,OAAO,CAAC,EAAE,CAEtB,aAAmB,GACxB,CAAA,EAAS,CADR,EAGD,EACA,MAGR,OAAO,CACX,CACA,OAAO,CAAM,CAAE,CAAY,CAAE,OAEzB,AAAI,AAAW,KADf,CAAA,EAAS,EAAO,IAAI,EAApB,EAEW,IAAI,CAAC,OAAO,GAEhB,IAAI,CAAC,MAAM,CAAC,AAAC,GACT,EAAa,EAAK,GAC1B,CAAA,EACP,CACA,OAAO,CAAM,CAAE,CAAe,CAAE,CAC5B,IAAM,EAAa,EAAE,CA0BrB,OAzBA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,AAAC,IACf,GAAI,aAAmB,EAAU,CAC7B,IAAI,EAAa,EAAE,CAWnB,GAVA,EAAQ,OAAO,CAAC,OAAO,CAAC,AAAC,IACjB,CAAA,CAAC,GAAU,EAAO,EAAtB,IACS,EAID,EAAW,IAAI,CAAC,IAAI,EAAO,IAH3B,EAAW,IAAI,CAAC,IAAI,EAAO,IAMvC,GACI,EAAW,MAAM,CAAG,EAAG,CACvB,IAAI,EAAW,IAAI,EAAS,EAC5B,CAAA,EAAS,OAAO,CAAG,EACnB,EAAW,IAAI,CAAC,EACpB,CACJ,CACI,aAAmB,GACf,CAAA,CAAC,GAAU,EAAO,EAAA,GAClB,EAAW,IAAI,CAAC,IAAI,EAAO,GAGvC,GACO,CACX,CACJ,CAEA,MAAM,EACF,YAAY,CAAQ,CAAE,CAAK,CAAE,CAAS,CAAE,CACpC,IAAI,CAAC,OAAO,CAAG,CACX,KAAM,UACN,YAAa,iBACb,OAAQ,YACR,OAAQ,YACR,IAAK,SACL,MAAO,WACP,UAAW,gBACX,YAAa,kBACb,SAAU,eACV,SAAU,cACV,aAAc,8BACd,MAAO,WACP,WAAY,uBACZ,UAAW,uBACX,QAAS,aACT,UAAW,gBACX,UAAW,gBACX,OAAQ,YACR,kBAAmB,sBACnB,UAAW,eACX,QAAS,aACT,YAAa,8BACb,KAAM,UACN,SAAU,cACV,cAAe,oBACf,kBAAmB,yBACnB,gBAAiB,sBACjB,kBAAmB,eACnB,qBAAsB,qCACtB,uBAAwB,uBACxB,iBAAkB,cAClB,OAAQ,YACR,aAAc,8BACd,YAAa,iBACb,KAAM,UACN,MAAO,WACP,SAAU,cACV,MAAO,WACP,SAAU,cACV,KAAM,SACV,EACA,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,IAAI,CAAG,IAAI,CAAC,OAAO,GACxB,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,UAAU,GAC9B,IAAI,CAAC,iBAAiB,GACtB,IAAI,CAAC,oBAAoB,GACzB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAC/D,CACA,QAAS,CACL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAG,CAAA,CACzC,CACA,SAAU,CACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAClD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAG,CAAA,CACzC,CACA,MAAO,CACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,SAAS,EAC7D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,AAA+B,OAA/B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAY,IAAI,CAAC,OAAO,CAAC,SAAS,CAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAClH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAiB,QAC7C,IAAI,CAAC,WAAW,GAChB,IAAM,EAAkB,IAAI,CAAC,KAAK,CAAC,kBAAkB,GACrD,GAAI,EAAgB,MAAM,CAAE,CACxB,IAAM,EAAa,CAAe,CAAC,EAAgB,MAAM,CAAG,EAAE,CAAC,EAAE,CAC3D,EAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,aAAe,EAAa,MAC/E,GACA,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,EAEpD,CACJ,CACA,OAAQ,CACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAiB,SAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACzD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACzD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,UAAU,CAClE,CACA,mBAAoB,CAWhB,GAVA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAG,GAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,SAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAG,GAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,SAClC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EACxB,KAAxB,IAAI,CAAC,QAAQ,CAAC,KAAK,GACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAErD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAC1B,IAAK,IAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,CACd,KAAb,EAAE,IAAI,KACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,IACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,IAIZ,CAAA,aAAlC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAQ,IAAI,CAAC,QAAQ,CAAC,eAAe,CAE7E,CACA,sBAAuB,CACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAG,WACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAiB,WAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EACjE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAiB,SAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,OAAQ,UAC3C,CACA,SAAU,CACN,IAAI,EACJ,IAAM,EAAO,SAAS,aAAa,CAAC,MACpC,CAAA,EAAK,OAAO,CAAC,EAAE,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAClC,EAAK,YAAY,CAAC,aAAc,IAAI,CAAC,QAAQ,CAAC,SAAS,EACvD,EAAK,QAAQ,CAAG,EAChB,EAAK,SAAS,CAAG,AAAC,IACd,OAAQ,EAAE,GAAG,EACT,IAAK,UACL,IAAK,YACD,IAAI,CAAC,SAAS,CAAC,IAAI,GACnB,AAAU,cAAV,EAAE,GAAG,CAAmB,IAAI,CAAC,SAAS,CAAC,QAAU,IAAI,CAAC,SAAS,CAAC,MAChE,KACJ,KAAK,MAED,OADA,IAAI,CAAC,SAAS,CAAC,KAAK,GACb,CAAA,CACX,KAAK,QACL,IAAK,IACD,IAAI,CAAC,SAAS,CAAC,IAAI,GACnB,IAAM,EAAc,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAC9E,GACA,EAAY,KAAK,GAErB,KACJ,KAAK,SACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAE5B,CACA,MAAO,CAAA,CACX,EACA,EAAK,OAAO,CAAG,AAAC,IACR,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAG1B,CAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAG,IAAI,CAAC,SAAS,CAAC,KAAK,GAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAnE,CACJ,EACA,IAAM,EAAS,SAAS,aAAa,CAAC,OACtC,EAAO,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EACxC,EAAK,WAAW,CAAC,GACjB,IAAM,EAAW,SAAS,aAAa,CAAC,OACxC,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAC5C,IAAM,EAAkB,AAAsB,OAArB,CAAA,EAAK,IAAI,CAAC,KAAI,AAAJ,GAAmB,AAAO,KAAK,IAAZ,EAAgB,KAAK,EAAI,EAAG,kBAAkB,EAChG,EAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAK,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAI,GAAmB,EAAgB,MAAM,EAAI,EAC1G,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAGxC,EAAS,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAE/C,EAAS,OAAO,CAAG,AAAC,IAEhB,GADA,EAAE,eAAe,GACb,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACtB,OAEJ,IAAI,EAAe,CAAA,EACb,EAAS,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAK5C,GAHI,IAAI,CAAC,SAAS,CAAC,YAAY,EAC3B,CAAA,EAAe,AAA+C,CAAA,IAA/C,IAAI,CAAC,SAAS,CAAC,YAAY,CAFhC,EAAE,CAEsC,EADtD,EAGI,EAAc,CACd,GAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CACxB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAE,CAAA,GAC/B,IAAI,CAAC,iBAAiB,OAErB,CACD,IAAM,EAAc,IAAI,CAAC,KAAK,CAAC,cAAc,GACvC,EAAQ,EAAc,EAAY,KAAK,CAAG,GAChD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAO,CAAA,EACtC,CACI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,GAEpB,IAAI,CAAC,SAAS,CAAC,WAAW,EAC1B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAEhE,CACJ,EACA,IAAM,EAAc,SAAS,eAAe,CAAC,6BAA8B,OAC3E,EAAY,YAAY,CAAC,UAAW,eACpC,IAAM,EAAe,SAAS,eAAe,CAAC,6BAA8B,QAC5E,EAAa,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,YAAY,EACxD,EAAY,WAAW,CAAC,GACxB,EAAS,WAAW,CAAC,GACrB,EAAK,WAAW,CAAC,GACjB,IAAM,EAAQ,SAAS,eAAe,CAAC,6BAA8B,OACrE,EAAM,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EACtC,EAAM,YAAY,CAAC,UAAW,eAC9B,IAAM,EAAY,SAAS,eAAe,CAAC,6BAA8B,QAOzE,OANA,EAAU,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,UAAU,EAC/C,IAAI,CAAC,QAAQ,CAAC,UAAU,EACxB,EAAM,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAEzC,EAAM,WAAW,CAAC,GAClB,EAAK,WAAW,CAAC,GACV,CACH,KAAM,EACN,OAAQ,EACR,SAAU,CACN,KAAM,EACN,IAAK,EACL,KAAM,CACV,EACA,MAAO,CACH,KAAM,EACN,KAAM,CACV,CACJ,CACJ,CACA,UAAU,CAAS,CAAE,CACC,UAAd,GACA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAE,cAAe,CAAA,CAAK,EAEnD,CACA,aAAc,CACV,IAAM,EAAoB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,AAAC,GAAM,EAAE,WAAW,CAAE,CAAA,GAC9D,EAAkB,IAAI,CAAC,QAAQ,CAAC,eAAe,AAC/C,CAAA,EAAkB,MAAM,GACpB,AAA8B,KAA9B,CAAiB,CAAC,EAAE,CAAC,IAAI,CACzB,EAAkB,CAAiB,CAAC,EAAE,CAAC,IAAI,CAER,KAA9B,CAAiB,CAAC,EAAE,CAAC,IAAI,EAC9B,CAAA,EAAkB,CAAiB,CAAC,EAAE,CAAC,IAAI,AAAJ,GAG/C,IAAM,EAAc,SAAS,aAAa,CAAC,OAG3C,OAFA,EAAY,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAClD,EAAY,SAAS,CAAG,EACjB,CACX,CACA,cAAe,CACX,GAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAE,CAC3B,IAAI,CAAC,iBAAiB,GACtB,MACJ,CACA,IAAI,CAAC,oBAAoB,EAC7B,CACA,mBAAoB,CAChB,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,AAAC,GACzB,EAAE,QAAQ,EAAI,CAAC,EAAE,WAAW,CACpC,CAAA,GACG,EAAiB,EAAS,MAAM,CAAG,EAAI,CAAQ,CAAC,EAAE,CAAG,KAC3D,GAAK,EAGA,CACD,IAAM,EAAc,SAAS,aAAa,CAAC,OAC3C,EAAY,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EACzC,EAAe,IAAI,CACnB,EAAY,SAAS,CAAG,EAAe,IAAI,CAG3C,EAAY,SAAS,CAAG,EAAe,IAAI,CAE/C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,EAAY,SAAS,AACtD,MAZI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,IAAI,CAAC,WAAW,GAAG,SAAS,AAazD,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAK,EAAS,MAAM,CAIhD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAH1D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAK/D,CACA,sBAAuB,CACnB,IAAI,EAAe,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAC1C,EAAkB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,AAAC,GAC9B,EAAI,QAAQ,EAAI,EAAI,OAAO,CACnC,CAAA,GACH,GAAI,AAA2B,IAA3B,EAAgB,MAAM,CAAQ,CAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,IAAI,CAAC,WAAW,GAAG,SAAS,CACzD,MACJ,CACK,CACD,IAAM,EAAc,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAC7E,GACA,EAAY,MAAM,EAE1B,CACA,GAAI,EAAgB,MAAM,CAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAE,CACvD,IAAM,EAAc,SAAS,aAAa,CAAC,OAC3C,EAAY,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAC1C,EAAY,WAAW,CAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAY,EAAgB,MAAM,CAAC,QAAQ,IAC5G,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,EAAY,SAAS,CAClD,MACJ,CACK,CACD,IAAM,EAAmB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAC1E,GACA,EAAiB,MAAM,EAE/B,CACA,IAAI,EAAc,EAAE,CACpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAa,MAAM,CAAE,IAAK,CAC1C,IAAM,EAAO,CAAY,CAAC,EAAE,CACtB,EAAK,EAAK,YAAY,CAAC,WACzB,GAII,CAAC,AAHS,EAAgB,MAAM,CAAC,AAAC,GAC3B,EAAI,EAAE,GAAK,EACnB,CAAA,GACQ,MAAM,EACb,EAAY,IAAI,CAAC,EAG7B,CACA,IAAK,IAAM,KAAK,EACZ,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrC,WAAW,KACH,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAC9D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAErC,EAAG,KAEP,EAAe,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAC1C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAgB,MAAM,CAAE,IAAK,CAC7C,IAAI,EAAY,CAAA,EAChB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAa,MAAM,CAAE,IACjC,CAAe,CAAC,EAAE,CAAC,EAAE,GAAK,OAAO,CAAY,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,GAC3D,CAAA,EAAY,CAAA,CAFpB,EAKI,IACI,AAAwB,IAAxB,EAAa,MAAM,CACnB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAe,CAAC,EAAE,GAE7D,AAAM,IAAN,EACL,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAe,CAAC,EAAE,EAAG,CAAY,CAAC,EAAE,EAGrF,CAAY,CAAC,EAAI,EAAE,CAAC,qBAAqB,CAAC,WAAY,IAAI,CAAC,aAAa,CAAC,CAAe,CAAC,EAAE,GAGvG,CACA,IAAI,CAAC,iBAAiB,EAC1B,CACA,cAAc,CAAM,CAAE,CAClB,IAAM,EAAQ,SAAS,aAAa,CAAC,OACrC,EAAM,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EACtC,EAAM,OAAO,CAAC,EAAE,CAAG,EAAO,EAAE,CAC5B,IAAM,EAAO,SAAS,aAAa,CAAC,OAIpC,GAHA,EAAK,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACzC,EAAK,SAAS,CAAG,EAAO,IAAI,CAC5B,EAAM,WAAW,CAAC,GACd,CAAC,EAAO,SAAS,CAAE,CACnB,IAAM,EAAY,SAAS,aAAa,CAAC,OACzC,EAAU,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAChD,EAAU,OAAO,CAAG,AAAC,IAGjB,GAFA,EAAE,cAAc,GAChB,EAAE,eAAe,GACb,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACtB,OAEJ,IAAI,EAAe,CAAA,EACb,EAAS,IAAI,CAAC,KAAK,CAAC,kBAAkB,GACtC,EAAQ,EAAO,MAAM,CAAC,AAAC,GAClB,EAAE,QAAQ,EAAI,EAAE,EAAE,GAAK,EAAO,EAAE,CACxC,CAAA,GACH,GAAI,CAAA,CAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAI,CAAA,EAAM,MAAM,CAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,AAAX,CAAA,IAG1D,IAAI,CAAC,SAAS,CAAC,YAAY,EAC3B,CAAA,EAAe,AAA+C,CAAA,IAA/C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAO,EADtD,EAGI,GAAc,CACd,IAAI,EAAiB,EAAE,CACvB,IAAK,IAAM,KAAK,EAAO,CACnB,GAAI,aAAa,EACb,IAAK,IAAM,KAAK,EAAE,OAAO,CACrB,EAAe,IAAI,CAAC,EAAE,KAAK,EAG/B,aAAa,GACb,EAAe,IAAI,CAAC,EAAE,KAAK,CAEnC,CACA,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAgB,CAAA,GACvC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,GAEpB,IAAI,CAAC,SAAS,CAAC,WAAW,EAC1B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAE/B,IAAI,CAAC,iBAAiB,EAC1B,CACJ,EACA,IAAM,EAAY,SAAS,eAAe,CAAC,6BAA8B,OACzE,EAAU,YAAY,CAAC,UAAW,eAClC,IAAM,EAAa,SAAS,eAAe,CAAC,6BAA8B,QAC1E,EAAW,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,YAAY,EACtD,EAAU,WAAW,CAAC,GACtB,EAAU,WAAW,CAAC,GACtB,EAAM,WAAW,CAAC,EACtB,CACA,OAAO,CACX,CACA,YAAa,CACT,IAAM,EAAO,SAAS,aAAa,CAAC,MACpC,CAAA,EAAK,OAAO,CAAC,EAAE,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAClC,IAAM,EAAS,IAAI,CAAC,SAAS,GAC7B,EAAK,WAAW,CAAC,EAAO,IAAI,EAC5B,IAAM,EAAO,IAAI,CAAC,OAAO,GAEzB,OADA,EAAK,WAAW,CAAC,GACV,CACH,KAAM,EACN,OAAQ,EACR,KAAM,CACV,CACJ,CACA,aAAc,CACV,GAAsC,aAAlC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAI7B,AAA+B,SAA/B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAJoB,CAC9C,IAAI,CAAC,gBAAgB,GACrB,MACJ,CAKK,GAAI,AAA+B,OAA/B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAW,CAC1C,IAAI,CAAC,gBAAgB,GACrB,MACJ,CACI,AAAsB,OAAtB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,gBAAgB,GAGrB,IAAI,CAAC,gBAAgB,EAE7B,CACA,WAAY,CACR,IAAM,EAAO,SAAS,aAAa,CAAC,OAC9B,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,SAAS,aAAa,CAAC,OACvC,EAAK,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EACtC,IAAM,EAAe,CACjB,KAAA,EACA,MAAA,CACJ,EA6CA,GA5CK,IAAI,CAAC,QAAQ,CAAC,UAAU,GACzB,EAAK,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EACpC,EAAM,QAAQ,CAAG,CAAA,GAErB,EAAM,IAAI,CAAG,SACb,EAAM,WAAW,CAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CACnD,EAAM,QAAQ,CAAG,GACjB,EAAM,YAAY,CAAC,aAAc,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAChE,EAAM,YAAY,CAAC,iBAAkB,OACrC,EAAM,YAAY,CAAC,eAAgB,OACnC,EAAM,YAAY,CAAC,cAAe,OAClC,EAAM,OAAO,CAAG,EAAS,AAAC,IACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,KAAK,CACxC,EAAG,KACH,EAAM,SAAS,CAAG,AAAC,IACf,OAAQ,EAAE,GAAG,EACT,IAAK,UACL,IAAK,YAED,MADA,AAAU,cAAV,EAAE,GAAG,CAAmB,IAAI,CAAC,SAAS,CAAC,QAAU,IAAI,CAAC,SAAS,CAAC,MACzD,CAAA,CACX,KAAK,MACD,IAAI,CAAC,SAAS,CAAC,KAAK,GACpB,KACJ,KAAK,SAED,OADA,IAAI,CAAC,SAAS,CAAC,KAAK,GACb,CAAA,CACX,KAAK,QACL,IAAK,IACD,GAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAI,EAAE,OAAO,CAEnC,OADA,EAAQ,KAAK,GACN,CAAA,CAEN,EACD,IAAM,EAAc,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAClF,GAAI,EAEA,OADA,EAAY,KAAK,GACV,CAAA,CAEf,CAER,CACA,MAAO,CAAA,CACX,EACA,EAAK,WAAW,CAAC,GACb,IAAI,CAAC,SAAS,CAAC,OAAO,CAAE,CACxB,EAAQ,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAC1C,IAAM,EAAO,SAAS,eAAe,CAAC,6BAA8B,OACpE,EAAK,YAAY,CAAC,UAAW,eAC7B,IAAM,EAAW,SAAS,eAAe,CAAC,6BAA8B,QACxE,EAAS,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,WAAW,EACnD,EAAK,WAAW,CAAC,GACjB,EAAQ,WAAW,CAAC,GACpB,EAAQ,OAAO,CAAG,AAAC,IAGf,GAFA,EAAE,cAAc,GAChB,EAAE,eAAe,GACb,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CACvB,OAEJ,IAAM,EAAa,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GACvD,GAAI,AAAe,KAAf,EAAmB,CACnB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAC/B,MACJ,CACA,IAAM,EAAY,AAAC,IACf,IAAI,EAAY,IAAI,EAAO,GAE3B,GADA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GACrB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAE,CAC1B,IAAI,EAAS,IAAI,CAAC,KAAK,CAAC,WAAW,GACnC,EAAO,IAAI,CAAC,EAAU,KAAK,EAC3B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAQ,CAAA,EACvC,MAEI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAU,KAAK,CAAC,CAAE,CAAA,GAElD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAClB,IAAI,CAAC,QAAQ,CAAC,aAAa,EAC3B,WAAW,KACP,IAAI,CAAC,SAAS,CAAC,KAAK,EACxB,EAAG,IAEX,EACM,EAAe,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EACvB,EAAA,IAAjB,GAAwD,MAA9B,IAG1B,aAAwB,QACxB,EAAa,IAAI,CAAC,AAAC,IACX,AAAiB,UAAjB,OAAO,EACP,EAAU,CACN,KAAM,EACN,MAAO,CACX,GAGA,EAAU,EAElB,GAEK,AAAwB,UAAxB,OAAO,EACZ,EAAU,CACN,KAAM,EACN,MAAO,CACX,GAGA,EAAU,GAGlB,EACA,EAAK,WAAW,CAAC,GACjB,EAAa,OAAO,CAAG,CACnB,KAAM,EACN,IAAK,EACL,KAAM,CACV,CACJ,CACA,OAAO,CACX,CACA,aAAc,CACV,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EACnC,CACA,WAAW,EAAiB,CAAA,CAAK,CAAE,EAAc,CAAA,CAAK,CAAE,EAAY,CAAA,CAAK,CAAE,CACvE,IAAI,EAAQ,IAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAUrC,OATI,GACA,CAAA,GAAS,SAAW,IAAI,CAAC,OAAO,CAAC,WAAW,CAAG,GADnD,EAGI,GACA,CAAA,GAAS,SAAW,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAG,GADhD,EAGI,GACA,CAAA,GAAS,SAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAG,GAD5C,EAGO,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,GACzD,CACA,UAAU,CAAG,CAAE,CACX,IAAM,EAAU,IAAI,CAAC,UAAU,CAAC,CAAA,EAAM,CAAA,EAAM,CAAA,GAC5C,GAAI,AAAmB,IAAnB,EAAQ,MAAM,CACd,OAEJ,GAAI,AAAmB,IAAnB,EAAQ,MAAM,EACV,CAAC,CAAO,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAG,CAC1D,CAAO,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EACjD,MACJ,CAEJ,IAAI,EAAc,CAAA,EAClB,IAAK,IAAM,KAAK,EACR,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,GAC7C,CAAA,EAAc,CAAA,CAFtB,EAKA,GAAI,CAAC,EACD,CAAA,IAAK,IAAM,KAAK,EACZ,GAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAG,CAC7C,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EACxC,KACJ,CAAA,CAGR,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,IAChC,GAAI,CAAO,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAG,CACzD,IAAM,EAAa,CAAO,CAAC,EAAE,CAC7B,EAAW,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EACpD,IAAM,EAAa,EAAW,aAAa,CAC3C,GAAI,GAAc,EAAW,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAG,CAChE,IAAM,EAAgB,EAAW,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAC3E,GACA,EAAc,KAAK,EAE3B,CACA,IAAI,EAAe,CAAO,CAAC,AAAQ,SAAR,EAAkB,EAAI,EAAI,EAAQ,MAAM,CAAG,EAAI,EAAI,EAAK,EAAI,GAAK,EAAI,EAAI,EAAI,EAAQ,MAAM,CAAG,EAAE,CAC3H,EAAa,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EACnD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,GAC5C,IAAM,EAAe,EAAa,aAAa,CAC/C,GAAI,GAAgB,EAAa,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAG,CACrE,IAAM,EAAgB,EAAa,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAC7E,GACA,EAAc,KAAK,EAE3B,CACA,MACJ,CAEJ,CAAO,CAAC,AAAQ,SAAR,EAAiB,EAAI,EAAQ,MAAM,CAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EACvF,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,CAAO,CAAC,AAAQ,SAAR,EAAiB,EAAI,EAAQ,MAAM,CAAG,EAAE,CAChG,CACA,SAAU,CACN,IAAM,EAAU,SAAS,aAAa,CAAC,OAEvC,OADA,EAAQ,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAChC,CACX,CACA,YAAY,CAAK,CAAE,CACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAG,GAC9B,IAAM,EAAW,SAAS,aAAa,CAAC,OACxC,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EACzC,EAAS,WAAW,CAAG,EACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAClC,CACA,iBAAkB,CACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAG,GAC9B,IAAM,EAAe,SAAS,aAAa,CAAC,OAC5C,EAAa,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACjD,EAAa,WAAW,CAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CACtD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAClC,CACA,cAAc,CAAI,CAAE,CAEhB,GADA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAG,GAC1B,AAAgB,IAAhB,EAAK,MAAM,CAAQ,CACnB,IAAM,EAAY,SAAS,aAAa,CAAC,OACzC,EAAU,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAC3C,EAAU,SAAS,CAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAC9B,MACJ,CACA,IAAK,IAAM,KAAK,EAAM,CAClB,GAAI,aAAa,EAAU,CACvB,IAAM,EAAa,SAAS,aAAa,CAAC,OAC1C,EAAW,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAC9C,IAAM,EAAgB,SAAS,aAAa,CAAC,OAC7C,EAAc,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EACtD,EAAW,WAAW,CAAC,GACvB,IAAM,EAAoB,SAAS,aAAa,CAAC,OACjD,EAAkB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAC9D,EAAkB,WAAW,CAAG,EAAE,KAAK,CACvC,EAAc,WAAW,CAAC,GAC1B,IAAM,EAAkB,SAAS,aAAa,CAAC,OAG/C,GAFA,EAAgB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAC1D,EAAc,WAAW,CAAC,GACtB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAI,EAAE,SAAS,CAAE,CACzC,IAAM,EAAY,SAAS,aAAa,CAAC,OACzC,EAAU,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EACtD,IAAI,EAAc,CAAA,EAClB,IAAK,IAAM,KAAK,EAAE,OAAO,CACrB,GAAI,CAAC,EAAE,QAAQ,CAAE,CACb,EAAc,CAAA,EACd,KACJ,CAEA,GACA,EAAU,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAEjD,IAAM,EAAgB,SAAS,aAAa,CAAC,OAC7C,CAAA,EAAc,WAAW,CAAG,EAAE,aAAa,CAC3C,EAAU,WAAW,CAAC,GACtB,IAAM,EAAe,SAAS,eAAe,CAAC,6BAA8B,OAC5E,EAAa,YAAY,CAAC,UAAW,eACrC,EAAU,WAAW,CAAC,GACtB,IAAM,EAAe,SAAS,eAAe,CAAC,6BAA8B,QAC5E,EAAa,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAChE,EAAa,WAAW,CAAC,GACzB,IAAM,EAAiB,SAAS,eAAe,CAAC,6BAA8B,QAC9E,EAAe,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,sBAAsB,EACpE,EAAa,WAAW,CAAC,GACzB,EAAU,gBAAgB,CAAC,QAAS,AAAC,IACjC,EAAE,cAAc,GAChB,EAAE,eAAe,GACjB,IAAM,EAAkB,IAAI,CAAC,KAAK,CAAC,WAAW,GAC9C,GAAI,EAAa,CACb,IAAM,EAAc,EAAgB,MAAM,CAAC,AAAC,IACxC,IAAK,IAAM,KAAK,EAAE,OAAO,CACrB,GAAI,IAAM,EAAE,KAAK,CACb,MAAO,CAAA,EAGf,MAAO,CAAA,CACX,GACA,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAa,CAAA,GACxC,MACJ,CACK,CACD,IAAM,EAAc,EAAgB,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,AAAC,GAAM,EAAE,KAAK,GACvE,IAAK,IAAM,KAAK,EAAE,OAAO,CAChB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,GAC9B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAGjC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAa,CAAA,GACxC,MACJ,CACJ,GACA,EAAgB,WAAW,CAAC,EAChC,CACA,GAAI,AAAe,QAAf,EAAE,QAAQ,CAAY,CACtB,IAAM,EAAmB,SAAS,aAAa,CAAC,OAChD,EAAiB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAC5D,IAAM,EAAsB,SAAS,eAAe,CAAC,6BAA8B,OACnF,EAAoB,YAAY,CAAC,UAAW,eAC5C,EAAoB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EACpD,EAAiB,WAAW,CAAC,GAC7B,IAAM,EAAwB,SAAS,eAAe,CAAC,6BAA8B,QACrF,EAAoB,WAAW,CAAC,GAC5B,EAAE,OAAO,CAAC,IAAI,CAAC,AAAC,GAAM,EAAE,QAAQ,GAAK,AAA2C,KAA3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IACzE,EAAiB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAChD,EAAsB,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,SAAS,GAEzD,AAAe,SAAf,EAAE,QAAQ,EACf,EAAW,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAC1C,EAAsB,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,SAAS,GAE1C,UAAf,EAAE,QAAQ,GACf,EAAW,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAC3C,EAAsB,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,UAAU,GAEnE,EAAc,gBAAgB,CAAC,QAAS,AAAC,IACrC,EAAE,cAAc,GAChB,EAAE,eAAe,GACb,EAAW,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAChD,EAAW,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAC9C,EAAW,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAC1C,EAAsB,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,SAAS,IAG9D,EAAW,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAC7C,EAAW,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAC3C,EAAsB,YAAY,CAAC,IAAK,IAAI,CAAC,OAAO,CAAC,UAAU,EAEvE,GACA,EAAgB,WAAW,CAAC,EAChC,CAEA,IAAK,IAAM,KADX,EAAW,WAAW,CAAC,GACP,EAAE,OAAO,EACrB,EAAW,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAEvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAClC,CACI,aAAa,GACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAElD,CACJ,CACA,OAAO,CAAM,CAAE,CACX,GAAI,EAAO,WAAW,CAAE,CACpB,IAAM,EAAc,SAAS,aAAa,CAAC,OAG3C,OAFA,EAAY,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAC7C,EAAY,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EACpC,CACX,CACA,IAAM,EAAW,SAAS,aAAa,CAAC,OAmGxC,OAlGA,EAAS,OAAO,CAAC,EAAE,CAAG,EAAO,EAAE,CAC/B,EAAS,EAAE,CAAG,EAAO,EAAE,CACvB,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAC1C,EAAS,YAAY,CAAC,OAAQ,UAC1B,EAAO,KAAK,EACZ,EAAO,KAAK,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,AAAC,IAC7B,EAAS,SAAS,CAAC,GAAG,CAAC,EAC3B,GAEA,EAAO,KAAK,EACZ,CAAA,EAAS,KAAK,CAAC,OAAO,CAAG,EAAO,KAAK,AAAL,EAEhC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAI,AAA2C,KAA3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GACrE,EAAS,SAAS,CAAG,IAAI,CAAC,aAAa,CAAC,AAAgB,KAAhB,EAAO,IAAI,CAAU,EAAO,IAAI,CAAG,EAAO,IAAI,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAElJ,AAAgB,KAAhB,EAAO,IAAI,CAChB,EAAS,SAAS,CAAG,EAAO,IAAI,CAGhC,EAAS,WAAW,CAAG,EAAO,IAAI,CAElC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAI,EAAS,WAAW,EACxD,EAAS,YAAY,CAAC,QAAS,EAAS,WAAW,EAElD,EAAO,OAAO,EACf,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAExC,EAAO,QAAQ,EACf,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAE5C,EAAO,QAAQ,EAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC7C,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAExC,EAAO,QAAQ,EACf,EAAS,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAC5C,EAAS,YAAY,CAAC,gBAAiB,QACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAyB,EAAS,EAAE,IAGhE,EAAS,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAC/C,EAAS,YAAY,CAAC,gBAAiB,UAE3C,EAAS,gBAAgB,CAAC,QAAS,AAAC,IAChC,EAAE,cAAc,GAChB,EAAE,eAAe,GACjB,IAAM,EAAkB,IAAI,CAAC,KAAK,CAAC,WAAW,GAExC,EAAY,OAAO,AADT,EAAE,aAAa,CACE,OAAO,CAAC,EAAE,EAC3C,GAAI,EAAO,QAAQ,EAAK,EAAO,QAAQ,EAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAGlE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAI,EAAgB,MAAM,EAAI,CAAC,EAAO,QAAQ,EACnG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAI,EAAgB,MAAM,EAAI,EAAO,QAAQ,CAHnG,OAMJ,IAAI,EAAe,CAAA,EACb,EAAS,IAAI,CAAC,KAAK,CAAC,kBAAkB,GACxC,EAAQ,EAAE,AACV,CAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,GAEpB,EADA,EAAO,QAAQ,CACP,EAAO,MAAM,CAAC,AAAC,GAAM,EAAE,EAAE,GAAK,GAG9B,EAAO,MAAM,CAAC,IAGzB,IAAI,CAAC,QAAQ,CAAC,UAAU,GAErB,EADA,EAAO,QAAQ,CACP,EAAE,CAGF,CAAC,EAAO,EAGnB,IAAI,CAAC,SAAS,CAAC,YAAY,EAC5B,CAAA,EAAe,CAAA,CADnB,EAGI,IAAI,CAAC,SAAS,CAAC,YAAY,GAEvB,EADA,AAA+C,CAAA,IAA/C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAO,IAOvC,IACK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAC1B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAE7B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAM,GAAG,CAAC,AAAC,GAAM,EAAE,KAAK,EAAG,CAAA,GAClD,IAAI,CAAC,QAAQ,CAAC,aAAa,EAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,GAEpB,IAAI,CAAC,SAAS,CAAC,WAAW,EAC1B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAGvC,GACO,CACX,CACA,SAAU,CACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAC5B,CACA,cAAc,CAAG,CAAE,CAAM,CAAE,CAAS,CAAE,CAElC,IAAM,EAAQ,AAAI,OAAO,IAAM,EAAO,IAAI,GAAK,sBAAuB,KACtE,GAAI,CAAC,EAAI,KAAK,CAAC,GACX,OAAO,EAEX,IAAM,EAAqB,EAAI,KAAK,CAAC,GAAO,KAAK,CAC3C,EAAmB,EAAqB,EAAI,KAAK,CAAC,EAAM,CAAC,EAAE,CAAC,QAAQ,GAAG,MAAM,CAC7E,EAA2B,EAAI,SAAS,CAAC,EAAoB,GAEnE,OADkB,AARI,EAQY,OAAO,CAAC,EAAO,CAAC,aAAa,EAAE,EAAU,EAAE,EAAE,EAAyB,OAAO,CAAC,CAEpH,CACA,kBAAmB,CACf,IAAM,EAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CACxC,EAAgB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CACpD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACzD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAM,EAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAC1D,CAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAG,IAAO,CAAA,EAAa,EAAgB,CAAA,EAAK,iBAC1E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAG,EAAc,GAAG,CAAG,EAAc,MAAM,CAAG,OAAO,OAAO,CAAG,KAC1F,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAG,EAAc,IAAI,CAAG,OAAO,OAAO,CAAG,KACrE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAG,EAAc,KAAK,CAAG,IAC1D,CACA,kBAAmB,CACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACzD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtD,IAAM,EAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAC1D,CAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAG,mBACK,aAAlC,IAAI,CAAC,QAAQ,CAAC,eAAe,GAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAG,EAAc,GAAG,CAAG,EAAc,MAAM,CAAG,OAAO,OAAO,CAAG,KAC1F,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAG,EAAc,IAAI,CAAG,OAAO,OAAO,CAAG,KACrE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAG,EAAc,KAAK,CAAG,KAE9D,CACA,oBAAoB,CAAS,CAAE,CAAO,CAAE,CACpC,IAAM,EAAO,EAAU,SAAS,CAAG,EAAU,SAAS,CAChD,EAAU,EAAO,EAAU,YAAY,CACvC,EAAO,EAAQ,SAAS,CACxB,EAAU,EAAO,EAAQ,YAAY,AACvC,CAAA,EAAO,EACP,EAAU,SAAS,EAAI,EAAO,EAEzB,EAAU,GACf,CAAA,EAAU,SAAS,EAAI,EAAU,CADhC,CAGT,CACA,YAAa,CACT,IAAM,EAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CACxC,EAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,GAC/C,EAAgB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,QAEpD,AAAI,AADe,OAAO,WAAW,CAAI,CAAA,EAAS,GAAG,CAAG,CAAA,GACtC,GACV,EAAS,GAAG,CAAG,EACR,KAMR,MACX,CACA,mBAAoB,CAChB,GAAI,CAAC,IAAI,CAAC,KAAK,EAAI,CAAC,IAAI,CAAC,QAAQ,CAC7B,OAEJ,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,kBAAkB,GACxC,EAAmB,GAAY,EAAS,MAAM,CAAG,EACjD,EAAa,IAAI,CAAC,QAAQ,CAAC,UAAU,CACrC,EAAgB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAC3C,EAAiB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CACxC,EAAY,IAAI,CAAC,OAAO,CAAC,IAAI,AAC/B,CAAA,GAAiB,CAAE,CAAA,GAAc,CAAC,CAAA,EAClC,EAAe,SAAS,CAAC,MAAM,CAAC,GAGhC,EAAe,SAAS,CAAC,GAAG,CAAC,EAErC,CACJ,CAEA,MAAM,EACF,YAAY,CAAM,CAAE,CAChB,IAAI,CAAC,MAAM,CAAG,CAAA,EACd,IAAI,CAAC,QAAQ,CAAG,KAChB,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAC7C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAU,IAAI,CAAC,WAAW,CAAE,CACrD,QAAS,CAAA,CACb,GACA,IAAI,CAAC,QAAQ,CAAG,IAAI,iBAAiB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAC/D,IAAI,CAAC,YAAY,CAAC,CAAA,EACtB,CACA,QAAS,CACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAG,CAAA,CAC3B,CACA,SAAU,CACN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAG,CAAA,CAC3B,CACA,QAAS,CACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAG,GACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAG,OAC5B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,cAAe,OAC5C,CACA,QAAS,CACL,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,YAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAG,GAC5B,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,cAChC,CACA,aAAa,CAAM,CAAE,CACjB,IAAI,CAAC,MAAM,CAAG,EACV,GACI,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAE,CAC/B,QAAS,CAAA,EACT,UAAW,CAAA,EACX,WAAY,CAAA,CAChB,GAGJ,CAAC,GACG,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,QAAQ,CAAC,UAAU,EAGpC,CACA,YAAY,CAAE,CAAE,CAIZ,OAHI,IAAI,CAAC,MAAM,EAAI,IAAI,CAAC,aAAa,EACjC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,IAEtC,CAAA,CACX,CACA,YAAY,CAAS,CAAE,CACnB,GAAI,CAAC,IAAI,CAAC,MAAM,CACZ,OAEJ,IAAI,EAAe,CAAA,EACf,EAAkB,CAAA,EAClB,EAAwB,CAAA,EAC5B,IAAK,IAAM,KAAK,EACR,EAAE,MAAM,GAAK,IAAI,CAAC,MAAM,GACA,aAApB,EAAE,aAAa,EACf,CAAA,EAAkB,CAAA,CADtB,EAGwB,UAApB,EAAE,aAAa,EACf,CAAA,EAAe,CAAA,CADnB,GAIA,CAAA,AAAsB,aAAtB,EAAE,MAAM,CAAC,QAAQ,EAAmB,AAAsB,WAAtB,EAAE,MAAM,CAAC,QAAQ,AAAK,GAC1D,CAAA,EAAwB,CAAA,CAD5B,EAIA,GAAgB,IAAI,CAAC,aAAa,EAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAE/C,GAAmB,IAAI,CAAC,gBAAgB,GACxC,IAAI,CAAC,YAAY,CAAC,CAAA,GAClB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAC1C,IAAI,CAAC,YAAY,CAAC,CAAA,IAElB,GAAyB,IAAI,CAAC,eAAe,GAC7C,IAAI,CAAC,YAAY,CAAC,CAAA,GAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,IACjC,IAAI,CAAC,YAAY,CAAC,CAAA,GAE1B,CACA,SAAU,CACN,IAAI,EAAO,EAAE,CAEb,IAAK,IAAM,KADG,IAAI,CAAC,MAAM,CAAC,UAAU,CAEb,aAAf,EAAE,QAAQ,EACV,EAAK,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAEpB,WAAf,EAAE,QAAQ,EACV,EAAK,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAGzC,OAAO,CACX,CACA,oBAAoB,CAAQ,CAAE,CAC1B,IAAI,EAAO,CACP,GAAI,EAAS,EAAE,CACf,MAAO,EAAS,KAAK,CACrB,UAAW,EAAA,EAAS,OAAO,EAAG,AAA+B,SAA/B,EAAS,OAAO,CAAC,SAAS,CACxD,cAAe,EAAS,OAAO,CAAG,EAAS,OAAO,CAAC,aAAa,CAAG,aACnE,SAAU,EAAS,OAAO,CAAG,EAAS,OAAO,CAAC,QAAQ,CAAG,MACzD,QAAS,EAAE,AACf,EAEA,IAAK,IAAM,KADK,EAAS,UAAU,CAEZ,WAAf,EAAE,QAAQ,EACV,EAAK,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAGjD,OAAO,CACX,CACA,kBAAkB,CAAM,CAAE,CACtB,MAAO,CACH,GAAI,EAAO,EAAE,CACb,MAAO,EAAO,KAAK,CACnB,KAAM,EAAO,IAAI,CACjB,KAAM,EAAO,OAAO,EAAI,EAAO,OAAO,CAAC,IAAI,CAAG,EAAO,OAAO,CAAC,IAAI,CAAG,GACpE,SAAU,EAAO,QAAQ,CACzB,QAAS,AAAyB,SAAzB,EAAO,KAAK,CAAC,OAAO,CAC7B,SAAU,EAAO,QAAQ,CACzB,UAAW,EAAA,EAAO,OAAO,EAAG,AAA6B,SAA7B,EAAO,OAAO,CAAC,SAAS,CACpD,YAAa,AAA+B,SAA/B,EAAO,OAAO,CAAC,WAAW,CACvC,MAAO,EAAO,SAAS,CACvB,MAAO,EAAO,KAAK,CAAC,OAAO,CAC3B,KAAM,EAAO,OAAO,AACxB,CACJ,CACA,mBAAoB,CAChB,IAAI,EAAS,EAAE,CAEf,IAAK,IAAM,KADK,IAAI,CAAC,MAAM,CAAC,UAAU,CACb,CACrB,GAAI,AAAe,aAAf,EAAE,QAAQ,CAEV,IAAK,IAAM,KADa,EAAE,UAAU,CAEZ,WAAhB,EAAG,QAAQ,EAEP,AADW,EACJ,QAAQ,EACf,EAAO,IAAI,CAAC,AAFD,EAEQ,KAAK,CAKrB,CAAA,WAAf,EAAE,QAAQ,EAEN,AADW,EACJ,QAAQ,EACf,EAAO,IAAI,CAAC,AAFD,EAEQ,KAAK,CAGpC,CACA,OAAO,CACX,CACA,YAAY,CAAK,CAAE,CAGf,IAAK,IAAM,KAFX,IAAI,CAAC,YAAY,CAAC,CAAA,GACF,IAAI,CAAC,MAAM,CAAC,UAAU,EACb,CACrB,GAAI,AAAe,aAAf,EAAE,QAAQ,CAGV,IAAK,IAAM,KADa,AADP,EACgB,UAAU,CAEnB,WAAhB,EAAG,QAAQ,EAEX,CAAA,AADe,EACR,QAAQ,CAAG,EAAM,QAAQ,CAAC,AADlB,EACyB,KAAK,CAAA,CAItC,CAAA,WAAf,EAAE,QAAQ,EAEV,CAAA,AADe,EACR,QAAQ,CAAG,EAAM,QAAQ,CAAC,AADlB,EACyB,KAAK,CAAA,CAErD,CACA,IAAI,CAAC,YAAY,CAAC,CAAA,EACtB,CACA,aAAa,CAAE,CAAE,CAAK,CAAE,CAAO,CAAE,CAC7B,IAAI,CAAC,YAAY,CAAC,CAAA,GACd,GACA,CAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAG,CAD7B,EAGI,GACA,CAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAG,CADhC,EAGI,IACA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,GACxB,EAAQ,OAAO,CAAC,AAAC,IACI,KAAb,EAAE,IAAI,IACN,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,GAExC,IAEJ,IAAI,CAAC,YAAY,CAAC,CAAA,EACtB,CACA,cAAc,CAAI,CAAE,CAGhB,IAAK,IAAM,KAFX,IAAI,CAAC,YAAY,CAAC,CAAA,GAClB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAG,GACR,GACR,aAAa,GACb,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,IAE5C,aAAa,GACb,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,IAGlD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,MAAM,WACpC,IAAI,CAAC,YAAY,CAAC,CAAA,EACtB,CACA,eAAe,CAAQ,CAAE,CACrB,IAAM,EAAa,SAAS,aAAa,CAAC,YAS1C,GARA,EAAW,EAAE,CAAG,EAAS,EAAE,CAC3B,EAAW,KAAK,CAAG,EAAS,KAAK,CAC7B,EAAS,SAAS,EAClB,CAAA,EAAW,OAAO,CAAC,SAAS,CAAG,MADnC,EAG0B,QAAtB,EAAS,QAAQ,EACjB,CAAA,EAAW,OAAO,CAAC,QAAQ,CAAG,EAAS,QAAQ,AAAR,EAEvC,EAAS,OAAO,CAChB,IAAK,IAAM,KAAK,EAAS,OAAO,CAC5B,EAAW,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,IAGjD,OAAO,CACX,CACA,aAAa,CAAI,CAAE,CACf,IAAM,EAAW,SAAS,aAAa,CAAC,UAgCxC,OA/BA,EAAS,EAAE,CAAG,EAAK,EAAE,CACrB,EAAS,KAAK,CAAG,EAAK,KAAK,CAC3B,EAAS,SAAS,CAAG,EAAK,IAAI,CACZ,KAAd,EAAK,IAAI,EACT,EAAS,YAAY,CAAC,YAAa,EAAK,IAAI,EAE5C,EAAK,QAAQ,EACb,CAAA,EAAS,QAAQ,CAAG,EAAK,QAAQ,AAAR,EAEzB,EAAK,QAAQ,EACb,CAAA,EAAS,QAAQ,CAAG,CAAA,CADxB,EAGqB,CAAA,IAAjB,EAAK,OAAO,EACZ,CAAA,EAAS,KAAK,CAAC,OAAO,CAAG,MAD7B,EAGI,EAAK,WAAW,EAChB,EAAS,YAAY,CAAC,mBAAoB,QAE1C,EAAK,SAAS,EACd,EAAS,YAAY,CAAC,iBAAkB,QAExC,EAAK,KAAK,EACV,EAAK,KAAK,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,AAAC,IAC3B,EAAS,SAAS,CAAC,GAAG,CAAC,EAC3B,GAEA,EAAK,IAAI,EAAI,AAAqB,UAArB,OAAO,EAAK,IAAI,EAC7B,OAAO,IAAI,CAAC,EAAK,IAAI,EAAE,OAAO,CAAC,AAAC,IAC5B,EAAS,YAAY,CAAC,QAAU,AA19ChD,SAAmB,CAAG,EAClB,IAAM,EAAS,EAAI,OAAO,CAAC,mCAAoC,AAAC,GAAU,IAAM,EAAM,WAAW,IACjG,OAAO,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAE,CAAC,WAAW,GAAK,EAAO,SAAS,CAAC,GAAK,CACnE,EAu9C0D,GAAM,EAAK,IAAI,CAAC,EAAI,CAClE,GAEG,CACX,CACA,SAAU,CACN,IAAI,CAAC,YAAY,CAAC,CAAA,GAClB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAU,IAAI,CAAC,WAAW,EACtD,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,CAAC,UAAU,GACxB,IAAI,CAAC,QAAQ,CAAG,MAEpB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAC7B,IAAI,CAAC,MAAM,EACf,CACJ,CAoSA,OAlSA,MACI,YAAY,CAAM,CAAE,CAChB,IAAI,EAwCJ,GAvCA,IAAI,CAAC,MAAM,CAAG,CACV,OAAQ,KAAA,EACR,aAAc,CAAC,EAAK,IACT,AAAyD,KAAzD,EAAI,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,EAAO,WAAW,IAE5D,QAAS,KAAA,EACT,aAAc,KAAA,EACd,YAAa,KAAA,EACb,WAAY,KAAA,EACZ,UAAW,KAAA,EACX,YAAa,KAAA,EACb,WAAY,KAAA,CAChB,EACA,IAAI,CAAC,YAAY,CAAG,EAAS,KACrB,CAAA,AAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAK,IAAI,CAAC,QAAQ,CAAC,UAAU,AAAV,GAG5C,IAAI,CAAC,MAAM,CAAC,WAAW,EAC3B,GACA,IAAI,CAAC,YAAY,CAAG,EAAS,KACrB,CAAA,AAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAK,IAAI,CAAC,QAAQ,CAAC,UAAU,AAAV,GAG5C,IAAI,CAAC,MAAM,CAAC,WAAW,EAC3B,GACA,IAAI,CAAC,aAAa,CAAG,AAAC,IACb,IAAI,CAAC,QAAQ,CAAC,MAAM,EAGrB,EAAE,MAAM,EAAI,CAAC,AAvjD7B,SAAwB,CAAO,CAAE,CAAS,EACtC,SAAS,EAAS,CAAC,CAAE,CAAC,SAClB,AAAI,GAAK,GAAK,EAAE,SAAS,EAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAG9C,GAAK,GAAK,EAAE,OAAO,EAAI,EAAE,OAAO,CAAC,EAAE,EAAI,EAAE,OAAO,CAAC,EAAE,GAAK,EAFjD,EAKJ,IACX,CAYA,OAAO,EAAS,EAAS,IAAc,AAXvC,SAAS,EAAc,CAAC,CAAE,CAAC,SACvB,AAAI,AAAC,GAAK,IAAM,SAGP,EAAS,EAAG,GACV,EAGA,EAAc,EAAE,UAAU,CAAE,GAN5B,IAQf,EACqD,EAAS,EAClE,EAiiD4C,EAAE,MAAM,CAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,GACtD,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAEzB,EACA,IAAI,CAAC,sBAAsB,CAAG,KACtB,SAAS,MAAM,EACf,IAAI,CAAC,KAAK,EAElB,EACA,IAAI,CAAC,QAAQ,CAAI,AAAyB,UAAzB,OAAO,EAAO,MAAM,CAAgB,SAAS,aAAa,CAAC,EAAO,MAAM,EAAI,EAAO,MAAM,CACtG,CAAC,IAAI,CAAC,QAAQ,CAAE,CACZ,EAAO,MAAM,EAAI,EAAO,MAAM,CAAC,KAAK,EACpC,EAAO,MAAM,CAAC,KAAK,CAAC,AAAI,MAAM,kCAElC,MACJ,CACA,GAAI,AAA0B,WAA1B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAe,CAChC,EAAO,MAAM,EAAI,EAAO,MAAM,CAAC,KAAK,EACpC,EAAO,MAAM,CAAC,KAAK,CAAC,AAAI,MAAM,gCAElC,MACJ,CACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAC1B,IAAI,CAAC,OAAO,GAEhB,IAAI,CAAC,QAAQ,CAAG,IAAI,EAAS,EAAO,QAAQ,EAC5C,IAAM,EAAiB,CAAC,cAAe,aAAc,YAAa,cAAe,aAAa,CAC9F,IAAK,IAAM,KAAO,EAAO,MAAM,CACtB,EAAO,MAAM,CAAC,cAAc,CAAC,KAG9B,AAAgC,KAAhC,EAAe,OAAO,CAAC,GACvB,IAAI,CAAC,MAAM,CAAC,EAAI,CAAG,EAAS,EAAO,MAAM,CAAC,EAAI,CAAE,KAGhD,IAAI,CAAC,MAAM,CAAC,EAAI,CAAG,EAAO,MAAM,CAAC,EAAI,CAG7C,CAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAI,AAAC,CAAA,AAA0B,OAA1B,CAAA,EAAK,EAAO,QAAO,AAAP,GAAsB,AAAO,KAAK,IAAZ,EAAgB,KAAK,EAAI,EAAG,QAAQ,AAAR,EAAY,EAAO,QAAQ,CAAC,QAAQ,CAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACtJ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,KACpD,IAAI,CAAC,MAAM,CAAG,IAAI,EAAO,IAAI,CAAC,QAAQ,EACtC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EACnF,IAAI,CAAC,MAAM,CAAC,MAAM,GAClB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAG,AAAC,IACzB,IAAI,CAAC,WAAW,CAAC,EACrB,EACA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAG,AAAC,IACzB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAG,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EACjC,EACA,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAG,AAAC,IACxB,EACA,IAAI,CAAC,OAAO,GAGZ,IAAI,CAAC,MAAM,EAEnB,EACA,IAAI,CAAC,MAAM,CAAC,eAAe,CAAG,AAAC,IAC3B,IAAI,CAAC,OAAO,CAAC,EACjB,EACA,IAAI,CAAC,KAAK,CAAG,IAAI,EAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAG,WAAa,SAAU,EAAO,IAAI,CAAG,EAAO,IAAI,CAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IACpH,EAAO,IAAI,EACX,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAEhD,IAAM,EAAY,CACd,KAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EACzB,MAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAC3B,QAAS,IAAI,CAAC,MAAM,CAAC,OAAO,CAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAG,KAAA,EACrD,YAAa,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EACvC,UAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EACnC,OAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAC7B,aAAc,IAAI,CAAC,MAAM,CAAC,YAAY,CACtC,YAAa,IAAI,CAAC,MAAM,CAAC,WAAW,AACxC,CACA,CAAA,IAAI,CAAC,MAAM,CAAG,IAAI,EAAO,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,KAAK,CAAE,GACpD,IAAI,CAAC,MAAM,CAAC,YAAY,GACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAC5C,IAAM,EAAkB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAC7C,EAAuB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,mBACpD,EACA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAc,GAE5C,GACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAmB,GAEtD,IAAI,CAAC,QAAQ,CAAC,UAAU,EACxB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAE1F,SAAS,gBAAgB,CAAC,QAAS,IAAI,CAAC,aAAa,EACrD,OAAO,gBAAgB,CAAC,SAAU,IAAI,CAAC,YAAY,CAAE,CAAA,GAClB,SAA/B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,OAAO,gBAAgB,CAAC,SAAU,IAAI,CAAC,YAAY,CAAE,CAAA,GAEzD,SAAS,gBAAgB,CAAC,mBAAoB,IAAI,CAAC,sBAAsB,EACrE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EACtB,IAAI,CAAC,OAAO,GAEZ,IAAI,CAAC,QAAQ,CAAC,UAAU,EACxB,IAAI,CAAC,IAAI,GAEb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAG,IAAI,AAC7B,CACA,QAAS,CACL,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAG,CAAA,EACzB,IAAI,CAAC,MAAM,CAAC,MAAM,GAClB,IAAI,CAAC,MAAM,CAAC,MAAM,EACtB,CACA,SAAU,CACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAG,CAAA,EACzB,IAAI,CAAC,MAAM,CAAC,OAAO,GACnB,IAAI,CAAC,MAAM,CAAC,OAAO,EACvB,CACA,SAAU,CACN,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAC7B,CACA,QAAQ,CAAI,CAAE,CACV,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,WAAW,GACjC,EAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,GACzC,GAAI,EAAK,CACD,IAAI,CAAC,MAAM,CAAC,KAAK,EACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAEtB,MACJ,CACA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GACnB,IAAM,EAAY,IAAI,CAAC,KAAK,CAAC,OAAO,GACpC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAC1B,IAAI,CAAC,MAAM,CAAC,YAAY,GACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GACtB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAI,CAAC,EAAQ,EAAU,IAAI,CAAC,KAAK,CAAC,WAAW,KACpE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAE7D,CACA,aAAc,CACV,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EACjC,CACA,YAAY,CAAK,CAAE,EAAiB,CAAA,CAAI,CAAE,CACtC,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,WAAW,GACvC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAS,MAAM,OAAO,CAAC,GAAS,EAAQ,CAAC,EAAM,EACxE,IAAM,EAAO,IAAI,CAAC,KAAK,CAAC,OAAO,GAC/B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAC1B,IAAI,CAAC,MAAM,CAAC,YAAY,GACpB,AAA2C,KAA3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAGlD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAE1B,GAAkB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAI,CAAC,EAAQ,EAAU,IAAI,CAAC,KAAK,CAAC,WAAW,KACtF,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAE7D,CACA,UAAU,CAAM,CAAE,CACd,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,WAAW,GAClC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,AAAC,IAAQ,IAAI,EAAI,OAAO,EAAE,KAAK,GAAM,CAAA,AAAwB,OAAvB,CAAA,EAAK,EAAO,KAAK,AAAL,GAAmB,AAAO,KAAK,IAAZ,EAAgB,EAAK,EAAO,IAAI,AAAJ,CAAO,IAC1I,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAEzB,IAAM,EAAO,IAAI,CAAC,KAAK,CAAC,OAAO,GAC/B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAC1B,IAAI,CAAC,MAAM,CAAC,YAAY,GACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GACtB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAI,CAAC,EAAQ,EAAU,IAAI,CAAC,KAAK,CAAC,WAAW,KACpE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAE7D,CACA,MAAO,CACC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAG9C,IAAI,CAAC,MAAM,CAAC,UAAU,EACtB,IAAI,CAAC,MAAM,CAAC,UAAU,GAE1B,IAAI,CAAC,MAAM,CAAC,IAAI,GACZ,IAAI,CAAC,QAAQ,CAAC,UAAU,EACxB,IAAI,CAAC,MAAM,CAAC,WAAW,GAE3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAG,CAAA,EACvB,WAAW,KACH,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,SAAS,GAErB,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB,CAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAG,CAAA,CAD/B,CAGJ,EAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EACS,aAAlC,IAAI,CAAC,QAAQ,CAAC,eAAe,GACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,cAAc,IAAI,CAAC,QAAQ,CAAC,YAAY,EAE5C,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAG,YAAY,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAG,MAE5F,CACA,MAAM,EAAY,IAAI,CAAE,CACf,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,GAGjD,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,WAAW,GAE3B,IAAI,CAAC,MAAM,CAAC,KAAK,GAC8B,KAA3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EACtC,IAAI,CAAC,MAAM,CAAC,IAEhB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GACtB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAG,CAAA,EACvB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAG,CAAA,EAC3B,WAAW,KACH,IAAI,CAAC,MAAM,CAAC,UAAU,EACtB,IAAI,CAAC,MAAM,CAAC,UAAU,EAE9B,EAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,cAAc,IAAI,CAAC,QAAQ,CAAC,YAAY,EAEhD,CACA,OAAO,CAAK,CAAE,CAIV,GAHI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAK,GAC3C,CAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAG,CAD7C,EAGI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAE,CACrB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,AAAU,KAAV,EAAe,IAAI,CAAC,KAAK,CAAC,OAAO,GAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAO,IAAI,CAAC,MAAM,CAAC,YAAY,GACjH,MACJ,CACA,IAAI,CAAC,MAAM,CAAC,eAAe,GAC3B,IAAM,EAAa,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAO,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAC1E,GAAI,aAAsB,QAAS,CAC/B,EACK,IAAI,CAAC,AAAC,IACP,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAC3D,GACK,KAAK,CAAC,AAAC,IACR,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,AAAe,UAAf,OAAO,EAAmB,EAAM,EAAI,OAAO,CACvE,GACA,MACJ,CACS,MAAM,OAAO,CAAC,GACnB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAGvD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,yDAEhC,CACA,SAAU,CACN,SAAS,mBAAmB,CAAC,QAAS,IAAI,CAAC,aAAa,EACxD,OAAO,mBAAmB,CAAC,SAAU,IAAI,CAAC,YAAY,CAAE,CAAA,GACrB,SAA/B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,OAAO,mBAAmB,CAAC,SAAU,IAAI,CAAC,YAAY,CAAE,CAAA,GAE5D,SAAS,mBAAmB,CAAC,mBAAoB,IAAI,CAAC,sBAAsB,EAC5E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,EACrB,IAAI,CAAC,MAAM,CAAC,OAAO,GACnB,IAAI,CAAC,MAAM,CAAC,OAAO,EACvB,CACJ,CAIJ,IH/zDA,MAAM,EAAM,CACV,OAAQ,SAAS,aAAa,CAAC,uBAC/B,QAAS,SAAS,aAAa,CAAC,aAChC,OAAQ,SAAS,aAAa,CAAC,WAC/B,MAAO,SAAS,aAAa,CAAC,SAChC,CAEA,CAAA,EAAI,MAAM,CAAC,SAAS,CAAG,GACvB,EAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,YAAa,UAC1C,EAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aACxB,EAAI,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,aAIX,ACVN,MAAM,GAAK,IAAI,CAAC,AAAA,IACrB,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,EAAS,MAAM,EAEjC,OAAO,EAAS,IAAI,EACtB,GDMC,IAAI,CAAC,AAAA,Q,EACJ,OEpBW,AFoBW,EEpBL,GAAG,CAAC,AAAA,GACd,CAAC,eAAe,EAAE,EAAG,EAAE,CAAC,EAAE,EAAE,EAAG,IAAI,CAAC,SAAS,CAAC,EFoBrD,EAAI,MAAM,CAAC,kBAAkB,CAAC,YAAa,QAC3C,G,C,C,EAAI,I,E,U,C,E,O,C,C,EAAW,CACb,OAAQ,eACV,EACF,GACC,KAAK,CAAC,AAAA,IACL,EAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,YAC7B,GACC,OAAO,CAAC,KACP,EAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAU,YACzC,GAsBF,EAAI,MAAM,CAAC,gBAAgB,CAAC,SAnBR,AAAA,QClBK,CDmBvB,CAAA,EAAI,MAAM,CAAC,SAAS,CAAG,GACvB,EAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,YAAa,UAC1C,EAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aAIxB,CCzBuB,EDuBP,EAAE,aAAa,CAAC,KAAK,CCtB9B,MACL,GAAG,8BAAiC,eAAqB,GAAS,EAClE,IAAI,CAAC,AAAA,IACL,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,EAAS,MAAM,EAEjC,OAAO,EAAS,IAAI,EACtB,IDkBG,IAAI,CAAC,AAAA,IACJ,EAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,aAC7B,EAAI,OAAO,CAAC,SAAS,CEtClB,CAAC;gBACM,EAAE,AFqCoB,CErCjB,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,AFqCA,CErCG,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;uBACrC,EAAE,AFoCa,CEpCV,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;0CACZ,EAAE,AFmCN,CEnCS,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;UAC/D,CAAC,AFmCP,GACC,KAAK,CAAC,AAAA,IACL,EAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,YAC7B,GACC,OAAO,CAAC,KACP,EAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAU,YACzC,EACJ","sources":["<anon>","src/index.js","src/cat-api.js","src/create-markUp.js","node_modules/slim-select/dist/slimselect.umd.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nconst $6b5f202d1456c0af$var$api_key = \"live_gAL7JxmbjUU6gxkKBGgnlTuJEB3afNUZML5GYiRMmv5TP64TOpSgjuODdnlX0S1n\";\nconst $6b5f202d1456c0af$var$BASE_URL = \"https://api.thecatapi.com\";\nconst $6b5f202d1456c0af$var$END_POINT = \"/v1/breeds\";\nconst $6b5f202d1456c0af$var$url = `${$6b5f202d1456c0af$var$BASE_URL}${$6b5f202d1456c0af$var$END_POINT}?api_key=${$6b5f202d1456c0af$var$api_key}`;\nconst $6b5f202d1456c0af$var$END_POINT2 = \"/v1/images/search\";\nfunction $6b5f202d1456c0af$export$913382e0b15b5503() {\n    return fetch($6b5f202d1456c0af$var$url).then((response)=>{\n        if (!response.ok) throw new Error(response.status);\n        return response.json();\n    });\n}\nfunction $6b5f202d1456c0af$export$57b7d3a597416aa2(breedId) {\n    return fetch(`${$6b5f202d1456c0af$var$BASE_URL}${$6b5f202d1456c0af$var$END_POINT2}?api_key=${$6b5f202d1456c0af$var$api_key}&breed_ids=${breedId}`).then((response)=>{\n        if (!response.ok) throw new Error(response.status);\n        return response.json();\n    });\n}\n\n\nfunction $549b64263ce2af2d$export$e2882820f72b6fb0(value) {\n    let option = value.map((el)=>{\n        return `<option value=\"${el.id}\">${el.name}</option>`;\n    });\n    return option;\n}\nfunction $549b64263ce2af2d$export$ce252ca49f67e4ee(res) {\n    return `<div class=\"cat-info\">\n      <img src=\"${res[0].url}\" alt=\"${res[0].breeds[0].name}\" width=\"400\" />\n      <p class=\"descr\">${res[0].breeds[0].description}</p>\n      <p class=\"temperament\">Temperament: ${res[0].breeds[0].temperament}</p>\n    </div>`;\n}\n\n\nvar $f753f16ae3da2a89$exports = {};\n(function(global, factory) {\n    $f753f16ae3da2a89$exports = factory();\n})($f753f16ae3da2a89$exports, function() {\n    \"use strict\";\n    function generateID() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n    function hasClassInTree(element, className) {\n        function hasClass(e, c) {\n            if (c && e && e.classList && e.classList.contains(c)) return e;\n            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) return e;\n            return null;\n        }\n        function parentByClass(e, c) {\n            if (!e || e === document) return null;\n            else if (hasClass(e, c)) return e;\n            else return parentByClass(e.parentNode, c);\n        }\n        return hasClass(element, className) || parentByClass(element, className);\n    }\n    function debounce(func, wait = 50, immediate = false) {\n        let timeout;\n        return function(...args) {\n            const context = self;\n            const later = ()=>{\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            const callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    }\n    function isEqual(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    function kebabCase(str) {\n        const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match)=>\"-\" + match.toLowerCase());\n        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n    }\n    class Settings {\n        constructor(settings){\n            this.id = \"\";\n            this.style = \"\";\n            this.class = [];\n            this.isMultiple = false;\n            this.isOpen = false;\n            this.isFullOpen = false;\n            this.intervalMove = null;\n            if (!settings) settings = {};\n            this.id = \"ss-\" + generateID();\n            this.style = settings.style || \"\";\n            this.class = settings.class || [];\n            this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n            this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n            this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n            this.ariaLabel = settings.ariaLabel || \"Combobox\";\n            this.searchPlaceholder = settings.searchPlaceholder || \"Search\";\n            this.searchText = settings.searchText || \"No Results\";\n            this.searchingText = settings.searchingText || \"Searching...\";\n            this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n            this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n            this.contentLocation = settings.contentLocation || document.body;\n            this.contentPosition = settings.contentPosition || \"absolute\";\n            this.openPosition = settings.openPosition || \"auto\";\n            this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : \"Select Value\";\n            this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n            this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n            this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n            this.minSelected = settings.minSelected || 0;\n            this.maxSelected = settings.maxSelected || 1000;\n            this.timeoutDelay = settings.timeoutDelay || 200;\n            this.maxValuesShown = settings.maxValuesShown || 20;\n            this.maxValuesMessage = settings.maxValuesMessage || \"{number} selected\";\n        }\n    }\n    class Optgroup {\n        constructor(optgroup){\n            this.id = !optgroup.id || optgroup.id === \"\" ? generateID() : optgroup.id;\n            this.label = optgroup.label || \"\";\n            this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n            this.selectAllText = optgroup.selectAllText || \"Select All\";\n            this.closable = optgroup.closable || \"off\";\n            this.options = [];\n            if (optgroup.options) for (const o of optgroup.options)this.options.push(new Option(o));\n        }\n    }\n    class Option {\n        constructor(option){\n            this.id = !option.id || option.id === \"\" ? generateID() : option.id;\n            this.value = option.value === undefined ? option.text : option.value;\n            this.text = option.text || \"\";\n            this.html = option.html || \"\";\n            this.selected = option.selected !== undefined ? option.selected : false;\n            this.display = option.display !== undefined ? option.display : true;\n            this.disabled = option.disabled !== undefined ? option.disabled : false;\n            this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n            this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n            this.class = option.class || \"\";\n            this.style = option.style || \"\";\n            this.data = option.data || {};\n        }\n    }\n    class Store {\n        constructor(type, data){\n            this.selectType = \"single\";\n            this.data = [];\n            this.selectType = type;\n            this.setData(data);\n        }\n        validateDataArray(data) {\n            if (!Array.isArray(data)) return new Error(\"Data must be an array\");\n            for (let dataObj of data){\n                if (dataObj instanceof Optgroup || \"label\" in dataObj) {\n                    if (!(\"label\" in dataObj)) return new Error(\"Optgroup must have a label\");\n                    if (\"options\" in dataObj && dataObj.options) {\n                        for (let option of dataObj.options)return this.validateOption(option);\n                    }\n                } else if (dataObj instanceof Option || \"text\" in dataObj) return this.validateOption(dataObj);\n                else return new Error(\"Data object must be a valid optgroup or option\");\n            }\n            return null;\n        }\n        validateOption(option) {\n            if (!(\"text\" in option)) return new Error(\"Option must have a text\");\n            return null;\n        }\n        partialToFullData(data) {\n            let dataFinal = [];\n            data.forEach((dataObj)=>{\n                if (dataObj instanceof Optgroup || \"label\" in dataObj) {\n                    let optOptions = [];\n                    if (\"options\" in dataObj && dataObj.options) dataObj.options.forEach((option)=>{\n                        optOptions.push(new Option(option));\n                    });\n                    if (optOptions.length > 0) dataFinal.push(new Optgroup(dataObj));\n                }\n                if (dataObj instanceof Option || \"text\" in dataObj) dataFinal.push(new Option(dataObj));\n            });\n            return dataFinal;\n        }\n        setData(data) {\n            this.data = this.partialToFullData(data);\n            if (this.selectType === \"single\") this.setSelectedBy(\"value\", this.getSelected());\n        }\n        getData() {\n            return this.filter(null, true);\n        }\n        getDataOptions() {\n            return this.filter(null, false);\n        }\n        addOption(option) {\n            this.setData(this.getData().concat(new Option(option)));\n        }\n        setSelectedBy(selectedType, selectedValues) {\n            let firstOption = null;\n            let hasSelected = false;\n            for (let dataObj of this.data){\n                if (dataObj instanceof Optgroup) for (let option of dataObj.options){\n                    if (!firstOption) firstOption = option;\n                    option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                    if (option.selected && this.selectType === \"single\") hasSelected = true;\n                }\n                if (dataObj instanceof Option) {\n                    if (!firstOption) firstOption = dataObj;\n                    dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                    if (dataObj.selected && this.selectType === \"single\") hasSelected = true;\n                }\n            }\n            if (this.selectType === \"single\" && firstOption && !hasSelected) firstOption.selected = true;\n        }\n        getSelected() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedValues = [];\n            selectedOptions.forEach((option)=>{\n                selectedValues.push(option.value);\n            });\n            return selectedValues;\n        }\n        getSelectedOptions() {\n            return this.filter((opt)=>{\n                return opt.selected;\n            }, false);\n        }\n        getSelectedIDs() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedIDs = [];\n            selectedOptions.forEach((op)=>{\n                selectedIDs.push(op.id);\n            });\n            return selectedIDs;\n        }\n        getOptgroupByID(id) {\n            for (let dataObj of this.data){\n                if (dataObj instanceof Optgroup && dataObj.id === id) return dataObj;\n            }\n            return null;\n        }\n        getOptionByID(id) {\n            let options = this.filter((opt)=>{\n                return opt.id === id;\n            }, false);\n            return options.length ? options[0] : null;\n        }\n        getSelectType() {\n            return this.selectType;\n        }\n        getFirstOption() {\n            let option = null;\n            for (let dataObj of this.data){\n                if (dataObj instanceof Optgroup) option = dataObj.options[0];\n                else if (dataObj instanceof Option) option = dataObj;\n                if (option) break;\n            }\n            return option;\n        }\n        search(search, searchFilter) {\n            search = search.trim();\n            if (search === \"\") return this.getData();\n            return this.filter((opt)=>{\n                return searchFilter(opt, search);\n            }, true);\n        }\n        filter(filter, includeOptgroup) {\n            const dataSearch = [];\n            this.data.forEach((dataObj)=>{\n                if (dataObj instanceof Optgroup) {\n                    let optOptions = [];\n                    dataObj.options.forEach((option)=>{\n                        if (!filter || filter(option)) {\n                            if (!includeOptgroup) dataSearch.push(new Option(option));\n                            else optOptions.push(new Option(option));\n                        }\n                    });\n                    if (optOptions.length > 0) {\n                        let optgroup = new Optgroup(dataObj);\n                        optgroup.options = optOptions;\n                        dataSearch.push(optgroup);\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!filter || filter(dataObj)) dataSearch.push(new Option(dataObj));\n                }\n            });\n            return dataSearch;\n        }\n    }\n    class Render {\n        constructor(settings, store, callbacks){\n            this.classes = {\n                main: \"ss-main\",\n                placeholder: \"ss-placeholder\",\n                values: \"ss-values\",\n                single: \"ss-single\",\n                max: \"ss-max\",\n                value: \"ss-value\",\n                valueText: \"ss-value-text\",\n                valueDelete: \"ss-value-delete\",\n                valueOut: \"ss-value-out\",\n                deselect: \"ss-deselect\",\n                deselectPath: \"M10,10 L90,90 M10,90 L90,10\",\n                arrow: \"ss-arrow\",\n                arrowClose: \"M10,30 L50,70 L90,30\",\n                arrowOpen: \"M10,70 L50,30 L90,70\",\n                content: \"ss-content\",\n                openAbove: \"ss-open-above\",\n                openBelow: \"ss-open-below\",\n                search: \"ss-search\",\n                searchHighlighter: \"ss-search-highlight\",\n                searching: \"ss-searching\",\n                addable: \"ss-addable\",\n                addablePath: \"M50,10 L50,90 M10,50 L90,50\",\n                list: \"ss-list\",\n                optgroup: \"ss-optgroup\",\n                optgroupLabel: \"ss-optgroup-label\",\n                optgroupLabelText: \"ss-optgroup-label-text\",\n                optgroupActions: \"ss-optgroup-actions\",\n                optgroupSelectAll: \"ss-selectall\",\n                optgroupSelectAllBox: \"M60,10 L10,10 L10,90 L90,90 L90,50\",\n                optgroupSelectAllCheck: \"M30,45 L50,70 L90,10\",\n                optgroupClosable: \"ss-closable\",\n                option: \"ss-option\",\n                optionDelete: \"M10,10 L90,90 M10,90 L90,10\",\n                highlighted: \"ss-highlighted\",\n                open: \"ss-open\",\n                close: \"ss-close\",\n                selected: \"ss-selected\",\n                error: \"ss-error\",\n                disabled: \"ss-disabled\",\n                hide: \"ss-hide\"\n            };\n            this.store = store;\n            this.settings = settings;\n            this.callbacks = callbacks;\n            this.main = this.mainDiv();\n            this.content = this.contentDiv();\n            this.updateClassStyles();\n            this.updateAriaAttributes();\n            this.settings.contentLocation.appendChild(this.content.main);\n        }\n        enable() {\n            this.main.main.classList.remove(this.classes.disabled);\n            this.content.search.input.disabled = false;\n        }\n        disable() {\n            this.main.main.classList.add(this.classes.disabled);\n            this.content.search.input.disabled = true;\n        }\n        open() {\n            this.main.arrow.path.setAttribute(\"d\", this.classes.arrowOpen);\n            this.main.main.classList.add(this.settings.openPosition === \"up\" ? this.classes.openAbove : this.classes.openBelow);\n            this.main.main.setAttribute(\"aria-expanded\", \"true\");\n            this.moveContent();\n            const selectedOptions = this.store.getSelectedOptions();\n            if (selectedOptions.length) {\n                const selectedId = selectedOptions[selectedOptions.length - 1].id;\n                const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n                if (selectedOption) this.ensureElementInView(this.content.list, selectedOption);\n            }\n        }\n        close() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.setAttribute(\"aria-expanded\", \"false\");\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.main.arrow.path.setAttribute(\"d\", this.classes.arrowClose);\n        }\n        updateClassStyles() {\n            this.main.main.className = \"\";\n            this.main.main.removeAttribute(\"style\");\n            this.content.main.className = \"\";\n            this.content.main.removeAttribute(\"style\");\n            this.main.main.classList.add(this.classes.main);\n            this.content.main.classList.add(this.classes.content);\n            if (this.settings.style !== \"\") {\n                this.main.main.style.cssText = this.settings.style;\n                this.content.main.style.cssText = this.settings.style;\n            }\n            if (this.settings.class.length) {\n                for (const c of this.settings.class)if (c.trim() !== \"\") {\n                    this.main.main.classList.add(c.trim());\n                    this.content.main.classList.add(c.trim());\n                }\n            }\n            if (this.settings.contentPosition === \"relative\") this.content.main.classList.add(\"ss-\" + this.settings.contentPosition);\n        }\n        updateAriaAttributes() {\n            this.main.main.role = \"combobox\";\n            this.main.main.setAttribute(\"aria-haspopup\", \"listbox\");\n            this.main.main.setAttribute(\"aria-controls\", this.content.main.id);\n            this.main.main.setAttribute(\"aria-expanded\", \"false\");\n            this.content.main.setAttribute(\"role\", \"listbox\");\n        }\n        mainDiv() {\n            var _a;\n            const main = document.createElement(\"div\");\n            main.dataset.id = this.settings.id;\n            main.setAttribute(\"aria-label\", this.settings.ariaLabel);\n            main.tabIndex = 0;\n            main.onkeydown = (e)=>{\n                switch(e.key){\n                    case \"ArrowUp\":\n                    case \"ArrowDown\":\n                        this.callbacks.open();\n                        e.key === \"ArrowDown\" ? this.highlight(\"down\") : this.highlight(\"up\");\n                        return false;\n                    case \"Tab\":\n                        this.callbacks.close();\n                        return true;\n                    case \"Enter\":\n                    case \" \":\n                        this.callbacks.open();\n                        const highlighted = this.content.list.querySelector(\".\" + this.classes.highlighted);\n                        if (highlighted) highlighted.click();\n                        return false;\n                    case \"Escape\":\n                        this.callbacks.close();\n                        return false;\n                }\n                return false;\n            };\n            main.onclick = (e)=>{\n                if (this.settings.disabled) return;\n                this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();\n            };\n            const values = document.createElement(\"div\");\n            values.classList.add(this.classes.values);\n            main.appendChild(values);\n            const deselect = document.createElement(\"div\");\n            deselect.classList.add(this.classes.deselect);\n            const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n            if (!this.settings.allowDeselect || this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0) deselect.classList.add(this.classes.hide);\n            else deselect.classList.remove(this.classes.hide);\n            deselect.onclick = (e)=>{\n                e.stopPropagation();\n                if (this.settings.disabled) return;\n                let shouldDelete = true;\n                const before = this.store.getSelectedOptions();\n                const after = [];\n                if (this.callbacks.beforeChange) shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                if (shouldDelete) {\n                    if (this.settings.isMultiple) {\n                        this.callbacks.setSelected([], false);\n                        this.updateDeselectAll();\n                    } else {\n                        const firstOption = this.store.getFirstOption();\n                        const value = firstOption ? firstOption.value : \"\";\n                        this.callbacks.setSelected(value, false);\n                    }\n                    if (this.settings.closeOnSelect) this.callbacks.close();\n                    if (this.callbacks.afterChange) this.callbacks.afterChange(this.store.getSelectedOptions());\n                }\n            };\n            const deselectSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            deselectSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n            const deselectPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n            deselectPath.setAttribute(\"d\", this.classes.deselectPath);\n            deselectSvg.appendChild(deselectPath);\n            deselect.appendChild(deselectSvg);\n            main.appendChild(deselect);\n            const arrow = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            arrow.classList.add(this.classes.arrow);\n            arrow.setAttribute(\"viewBox\", \"0 0 100 100\");\n            const arrowPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n            arrowPath.setAttribute(\"d\", this.classes.arrowClose);\n            if (this.settings.alwaysOpen) arrow.classList.add(this.classes.hide);\n            arrow.appendChild(arrowPath);\n            main.appendChild(arrow);\n            return {\n                main: main,\n                values: values,\n                deselect: {\n                    main: deselect,\n                    svg: deselectSvg,\n                    path: deselectPath\n                },\n                arrow: {\n                    main: arrow,\n                    path: arrowPath\n                }\n            };\n        }\n        mainFocus(eventType) {\n            if (eventType !== \"click\") this.main.main.focus({\n                preventScroll: true\n            });\n        }\n        placeholder() {\n            const placeholderOption = this.store.filter((o)=>o.placeholder, false);\n            let placeholderText = this.settings.placeholderText;\n            if (placeholderOption.length) {\n                if (placeholderOption[0].html !== \"\") placeholderText = placeholderOption[0].html;\n                else if (placeholderOption[0].text !== \"\") placeholderText = placeholderOption[0].text;\n            }\n            const placeholder = document.createElement(\"div\");\n            placeholder.classList.add(this.classes.placeholder);\n            placeholder.innerHTML = placeholderText;\n            return placeholder;\n        }\n        renderValues() {\n            if (!this.settings.isMultiple) {\n                this.renderSingleValue();\n                return;\n            }\n            this.renderMultipleValues();\n        }\n        renderSingleValue() {\n            const selected = this.store.filter((o)=>{\n                return o.selected && !o.placeholder;\n            }, false);\n            const selectedSingle = selected.length > 0 ? selected[0] : null;\n            if (!selectedSingle) this.main.values.innerHTML = this.placeholder().outerHTML;\n            else {\n                const singleValue = document.createElement(\"div\");\n                singleValue.classList.add(this.classes.single);\n                if (selectedSingle.html) singleValue.innerHTML = selectedSingle.html;\n                else singleValue.innerText = selectedSingle.text;\n                this.main.values.innerHTML = singleValue.outerHTML;\n            }\n            if (!this.settings.allowDeselect || !selected.length) this.main.deselect.main.classList.add(this.classes.hide);\n            else this.main.deselect.main.classList.remove(this.classes.hide);\n        }\n        renderMultipleValues() {\n            let currentNodes = this.main.values.childNodes;\n            let selectedOptions = this.store.filter((opt)=>{\n                return opt.selected && opt.display;\n            }, false);\n            if (selectedOptions.length === 0) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n                return;\n            } else {\n                const placeholder = this.main.values.querySelector(\".\" + this.classes.placeholder);\n                if (placeholder) placeholder.remove();\n            }\n            if (selectedOptions.length > this.settings.maxValuesShown) {\n                const singleValue = document.createElement(\"div\");\n                singleValue.classList.add(this.classes.max);\n                singleValue.textContent = this.settings.maxValuesMessage.replace(\"{number}\", selectedOptions.length.toString());\n                this.main.values.innerHTML = singleValue.outerHTML;\n                return;\n            } else {\n                const maxValuesMessage = this.main.values.querySelector(\".\" + this.classes.max);\n                if (maxValuesMessage) maxValuesMessage.remove();\n            }\n            let removeNodes = [];\n            for(let i = 0; i < currentNodes.length; i++){\n                const node = currentNodes[i];\n                const id = node.getAttribute(\"data-id\");\n                if (id) {\n                    const found = selectedOptions.filter((opt)=>{\n                        return opt.id === id;\n                    }, false);\n                    if (!found.length) removeNodes.push(node);\n                }\n            }\n            for (const n of removeNodes){\n                n.classList.add(this.classes.valueOut);\n                setTimeout(()=>{\n                    if (this.main.values.hasChildNodes() && this.main.values.contains(n)) this.main.values.removeChild(n);\n                }, 100);\n            }\n            currentNodes = this.main.values.childNodes;\n            for(let d = 0; d < selectedOptions.length; d++){\n                let shouldAdd = true;\n                for(let i = 0; i < currentNodes.length; i++)if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) shouldAdd = false;\n                if (shouldAdd) {\n                    if (currentNodes.length === 0) this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                    else if (d === 0) this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                    else currentNodes[d - 1].insertAdjacentElement(\"afterend\", this.multipleValue(selectedOptions[d]));\n                }\n            }\n            this.updateDeselectAll();\n        }\n        multipleValue(option) {\n            const value = document.createElement(\"div\");\n            value.classList.add(this.classes.value);\n            value.dataset.id = option.id;\n            const text = document.createElement(\"div\");\n            text.classList.add(this.classes.valueText);\n            text.innerText = option.text;\n            value.appendChild(text);\n            if (!option.mandatory) {\n                const deleteDiv = document.createElement(\"div\");\n                deleteDiv.classList.add(this.classes.valueDelete);\n                deleteDiv.onclick = (e)=>{\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.settings.disabled) return;\n                    let shouldDelete = true;\n                    const before = this.store.getSelectedOptions();\n                    const after = before.filter((o)=>{\n                        return o.selected && o.id !== option.id;\n                    }, true);\n                    if (this.settings.minSelected && after.length < this.settings.minSelected) return;\n                    if (this.callbacks.beforeChange) shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                    if (shouldDelete) {\n                        let selectedValues = [];\n                        for (const o of after){\n                            if (o instanceof Optgroup) for (const c of o.options)selectedValues.push(c.value);\n                            if (o instanceof Option) selectedValues.push(o.value);\n                        }\n                        this.callbacks.setSelected(selectedValues, false);\n                        if (this.settings.closeOnSelect) this.callbacks.close();\n                        if (this.callbacks.afterChange) this.callbacks.afterChange(after);\n                        this.updateDeselectAll();\n                    }\n                };\n                const deleteSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                deleteSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                const deletePath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                deletePath.setAttribute(\"d\", this.classes.optionDelete);\n                deleteSvg.appendChild(deletePath);\n                deleteDiv.appendChild(deleteSvg);\n                value.appendChild(deleteDiv);\n            }\n            return value;\n        }\n        contentDiv() {\n            const main = document.createElement(\"div\");\n            main.dataset.id = this.settings.id;\n            const search = this.searchDiv();\n            main.appendChild(search.main);\n            const list = this.listDiv();\n            main.appendChild(list);\n            return {\n                main: main,\n                search: search,\n                list: list\n            };\n        }\n        moveContent() {\n            if (this.settings.contentPosition === \"relative\") {\n                this.moveContentBelow();\n                return;\n            }\n            if (this.settings.openPosition === \"down\") {\n                this.moveContentBelow();\n                return;\n            } else if (this.settings.openPosition === \"up\") {\n                this.moveContentAbove();\n                return;\n            }\n            if (this.putContent() === \"up\") this.moveContentAbove();\n            else this.moveContentBelow();\n        }\n        searchDiv() {\n            const main = document.createElement(\"div\");\n            const input = document.createElement(\"input\");\n            const addable = document.createElement(\"div\");\n            main.classList.add(this.classes.search);\n            const searchReturn = {\n                main: main,\n                input: input\n            };\n            if (!this.settings.showSearch) {\n                main.classList.add(this.classes.hide);\n                input.readOnly = true;\n            }\n            input.type = \"search\";\n            input.placeholder = this.settings.searchPlaceholder;\n            input.tabIndex = -1;\n            input.setAttribute(\"aria-label\", this.settings.searchPlaceholder);\n            input.setAttribute(\"autocapitalize\", \"off\");\n            input.setAttribute(\"autocomplete\", \"off\");\n            input.setAttribute(\"autocorrect\", \"off\");\n            input.oninput = debounce((e)=>{\n                this.callbacks.search(e.target.value);\n            }, 100);\n            input.onkeydown = (e)=>{\n                switch(e.key){\n                    case \"ArrowUp\":\n                    case \"ArrowDown\":\n                        e.key === \"ArrowDown\" ? this.highlight(\"down\") : this.highlight(\"up\");\n                        return false;\n                    case \"Tab\":\n                        this.callbacks.close();\n                        return true;\n                    case \"Escape\":\n                        this.callbacks.close();\n                        return false;\n                    case \"Enter\":\n                    case \" \":\n                        if (this.callbacks.addable && e.ctrlKey) {\n                            addable.click();\n                            return false;\n                        } else {\n                            const highlighted = this.content.list.querySelector(\".\" + this.classes.highlighted);\n                            if (highlighted) {\n                                highlighted.click();\n                                return false;\n                            }\n                        }\n                        return true;\n                }\n                return true;\n            };\n            main.appendChild(input);\n            if (this.callbacks.addable) {\n                addable.classList.add(this.classes.addable);\n                const plus = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                plus.setAttribute(\"viewBox\", \"0 0 100 100\");\n                const plusPath = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                plusPath.setAttribute(\"d\", this.classes.addablePath);\n                plus.appendChild(plusPath);\n                addable.appendChild(plus);\n                addable.onclick = (e)=>{\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (!this.callbacks.addable) return;\n                    const inputValue = this.content.search.input.value.trim();\n                    if (inputValue === \"\") {\n                        this.content.search.input.focus();\n                        return;\n                    }\n                    const runFinish = (oo)=>{\n                        let newOption = new Option(oo);\n                        this.callbacks.addOption(newOption);\n                        if (this.settings.isMultiple) {\n                            let values = this.store.getSelected();\n                            values.push(newOption.value);\n                            this.callbacks.setSelected(values, true);\n                        } else this.callbacks.setSelected([\n                            newOption.value\n                        ], true);\n                        this.callbacks.search(\"\");\n                        if (this.settings.closeOnSelect) setTimeout(()=>{\n                            this.callbacks.close();\n                        }, 100);\n                    };\n                    const addableValue = this.callbacks.addable(inputValue);\n                    if (addableValue === false || addableValue === undefined || addableValue === null) return;\n                    if (addableValue instanceof Promise) addableValue.then((value)=>{\n                        if (typeof value === \"string\") runFinish({\n                            text: value,\n                            value: value\n                        });\n                        else runFinish(value);\n                    });\n                    else if (typeof addableValue === \"string\") runFinish({\n                        text: addableValue,\n                        value: addableValue\n                    });\n                    else runFinish(addableValue);\n                    return;\n                };\n                main.appendChild(addable);\n                searchReturn.addable = {\n                    main: addable,\n                    svg: plus,\n                    path: plusPath\n                };\n            }\n            return searchReturn;\n        }\n        searchFocus() {\n            this.content.search.input.focus();\n        }\n        getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {\n            let query = \".\" + this.classes.option;\n            if (notPlaceholder) query += \":not(.\" + this.classes.placeholder + \")\";\n            if (notDisabled) query += \":not(.\" + this.classes.disabled + \")\";\n            if (notHidden) query += \":not(.\" + this.classes.hide + \")\";\n            return Array.from(this.content.list.querySelectorAll(query));\n        }\n        highlight(dir) {\n            const options = this.getOptions(true, true, true);\n            if (options.length === 0) return;\n            if (options.length === 1) {\n                if (!options[0].classList.contains(this.classes.highlighted)) {\n                    options[0].classList.add(this.classes.highlighted);\n                    return;\n                }\n            }\n            let highlighted = false;\n            for (const o of options)if (o.classList.contains(this.classes.highlighted)) highlighted = true;\n            if (!highlighted) {\n                for (const o of options)if (o.classList.contains(this.classes.selected)) {\n                    o.classList.add(this.classes.highlighted);\n                    break;\n                }\n            }\n            for(let i = 0; i < options.length; i++)if (options[i].classList.contains(this.classes.highlighted)) {\n                const prevOption = options[i];\n                prevOption.classList.remove(this.classes.highlighted);\n                const prevParent = prevOption.parentElement;\n                if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                    const optgroupLabel = prevParent.querySelector(\".\" + this.classes.optgroupLabel);\n                    if (optgroupLabel) optgroupLabel.click();\n                }\n                let selectOption = options[dir === \"down\" ? i + 1 < options.length ? i + 1 : 0 : i - 1 >= 0 ? i - 1 : options.length - 1];\n                selectOption.classList.add(this.classes.highlighted);\n                this.ensureElementInView(this.content.list, selectOption);\n                const selectParent = selectOption.parentElement;\n                if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                    const optgroupLabel = selectParent.querySelector(\".\" + this.classes.optgroupLabel);\n                    if (optgroupLabel) optgroupLabel.click();\n                }\n                return;\n            }\n            options[dir === \"down\" ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n            this.ensureElementInView(this.content.list, options[dir === \"down\" ? 0 : options.length - 1]);\n        }\n        listDiv() {\n            const options = document.createElement(\"div\");\n            options.classList.add(this.classes.list);\n            return options;\n        }\n        renderError(error) {\n            this.content.list.innerHTML = \"\";\n            const errorDiv = document.createElement(\"div\");\n            errorDiv.classList.add(this.classes.error);\n            errorDiv.textContent = error;\n            this.content.list.appendChild(errorDiv);\n        }\n        renderSearching() {\n            this.content.list.innerHTML = \"\";\n            const searchingDiv = document.createElement(\"div\");\n            searchingDiv.classList.add(this.classes.searching);\n            searchingDiv.textContent = this.settings.searchingText;\n            this.content.list.appendChild(searchingDiv);\n        }\n        renderOptions(data) {\n            this.content.list.innerHTML = \"\";\n            if (data.length === 0) {\n                const noResults = document.createElement(\"div\");\n                noResults.classList.add(this.classes.search);\n                noResults.innerHTML = this.settings.searchText;\n                this.content.list.appendChild(noResults);\n                return;\n            }\n            for (const d of data){\n                if (d instanceof Optgroup) {\n                    const optgroupEl = document.createElement(\"div\");\n                    optgroupEl.classList.add(this.classes.optgroup);\n                    const optgroupLabel = document.createElement(\"div\");\n                    optgroupLabel.classList.add(this.classes.optgroupLabel);\n                    optgroupEl.appendChild(optgroupLabel);\n                    const optgroupLabelText = document.createElement(\"div\");\n                    optgroupLabelText.classList.add(this.classes.optgroupLabelText);\n                    optgroupLabelText.textContent = d.label;\n                    optgroupLabel.appendChild(optgroupLabelText);\n                    const optgroupActions = document.createElement(\"div\");\n                    optgroupActions.classList.add(this.classes.optgroupActions);\n                    optgroupLabel.appendChild(optgroupActions);\n                    if (this.settings.isMultiple && d.selectAll) {\n                        const selectAll = document.createElement(\"div\");\n                        selectAll.classList.add(this.classes.optgroupSelectAll);\n                        let allSelected = true;\n                        for (const o of d.options)if (!o.selected) {\n                            allSelected = false;\n                            break;\n                        }\n                        if (allSelected) selectAll.classList.add(this.classes.selected);\n                        const selectAllText = document.createElement(\"span\");\n                        selectAllText.textContent = d.selectAllText;\n                        selectAll.appendChild(selectAllText);\n                        const selectAllSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                        selectAllSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                        selectAll.appendChild(selectAllSvg);\n                        const selectAllBox = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                        selectAllBox.setAttribute(\"d\", this.classes.optgroupSelectAllBox);\n                        selectAllSvg.appendChild(selectAllBox);\n                        const selectAllCheck = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                        selectAllCheck.setAttribute(\"d\", this.classes.optgroupSelectAllCheck);\n                        selectAllSvg.appendChild(selectAllCheck);\n                        selectAll.addEventListener(\"click\", (e)=>{\n                            e.preventDefault();\n                            e.stopPropagation();\n                            const currentSelected = this.store.getSelected();\n                            if (allSelected) {\n                                const newSelected = currentSelected.filter((s)=>{\n                                    for (const o of d.options){\n                                        if (s === o.value) return false;\n                                    }\n                                    return true;\n                                });\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            } else {\n                                const newSelected = currentSelected.concat(d.options.map((o)=>o.value));\n                                for (const o of d.options)if (!this.store.getOptionByID(o.id)) this.callbacks.addOption(o);\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                        });\n                        optgroupActions.appendChild(selectAll);\n                    }\n                    if (d.closable !== \"off\") {\n                        const optgroupClosable = document.createElement(\"div\");\n                        optgroupClosable.classList.add(this.classes.optgroupClosable);\n                        const optgroupClosableSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                        optgroupClosableSvg.setAttribute(\"viewBox\", \"0 0 100 100\");\n                        optgroupClosableSvg.classList.add(this.classes.arrow);\n                        optgroupClosable.appendChild(optgroupClosableSvg);\n                        const optgroupClosableArrow = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                        optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                        if (d.options.some((o)=>o.selected) || this.content.search.input.value.trim() !== \"\") {\n                            optgroupClosable.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute(\"d\", this.classes.arrowOpen);\n                        } else if (d.closable === \"open\") {\n                            optgroupEl.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute(\"d\", this.classes.arrowOpen);\n                        } else if (d.closable === \"close\") {\n                            optgroupEl.classList.add(this.classes.close);\n                            optgroupClosableArrow.setAttribute(\"d\", this.classes.arrowClose);\n                        }\n                        optgroupLabel.addEventListener(\"click\", (e)=>{\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (optgroupEl.classList.contains(this.classes.close)) {\n                                optgroupEl.classList.remove(this.classes.close);\n                                optgroupEl.classList.add(this.classes.open);\n                                optgroupClosableArrow.setAttribute(\"d\", this.classes.arrowOpen);\n                            } else {\n                                optgroupEl.classList.remove(this.classes.open);\n                                optgroupEl.classList.add(this.classes.close);\n                                optgroupClosableArrow.setAttribute(\"d\", this.classes.arrowClose);\n                            }\n                        });\n                        optgroupActions.appendChild(optgroupClosable);\n                    }\n                    optgroupEl.appendChild(optgroupLabel);\n                    for (const o of d.options)optgroupEl.appendChild(this.option(o));\n                    this.content.list.appendChild(optgroupEl);\n                }\n                if (d instanceof Option) this.content.list.appendChild(this.option(d));\n            }\n        }\n        option(option) {\n            if (option.placeholder) {\n                const placeholder = document.createElement(\"div\");\n                placeholder.classList.add(this.classes.option);\n                placeholder.classList.add(this.classes.hide);\n                return placeholder;\n            }\n            const optionEl = document.createElement(\"div\");\n            optionEl.dataset.id = option.id;\n            optionEl.id = option.id;\n            optionEl.classList.add(this.classes.option);\n            optionEl.setAttribute(\"role\", \"option\");\n            if (option.class) option.class.split(\" \").forEach((dataClass)=>{\n                optionEl.classList.add(dataClass);\n            });\n            if (option.style) optionEl.style.cssText = option.style;\n            if (this.settings.searchHighlight && this.content.search.input.value.trim() !== \"\") optionEl.innerHTML = this.highlightText(option.html !== \"\" ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n            else if (option.html !== \"\") optionEl.innerHTML = option.html;\n            else optionEl.textContent = option.text;\n            if (this.settings.showOptionTooltips && optionEl.textContent) optionEl.setAttribute(\"title\", optionEl.textContent);\n            if (!option.display) optionEl.classList.add(this.classes.hide);\n            if (option.disabled) optionEl.classList.add(this.classes.disabled);\n            if (option.selected && this.settings.hideSelected) optionEl.classList.add(this.classes.hide);\n            if (option.selected) {\n                optionEl.classList.add(this.classes.selected);\n                optionEl.setAttribute(\"aria-selected\", \"true\");\n                this.main.main.setAttribute(\"aria-activedescendant\", optionEl.id);\n            } else {\n                optionEl.classList.remove(this.classes.selected);\n                optionEl.setAttribute(\"aria-selected\", \"false\");\n            }\n            optionEl.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                const selectedOptions = this.store.getSelected();\n                const element = e.currentTarget;\n                const elementID = String(element.dataset.id);\n                if (option.disabled || option.selected && !this.settings.allowDeselect) return;\n                if (this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected || this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected) return;\n                let shouldUpdate = false;\n                const before = this.store.getSelectedOptions();\n                let after = [];\n                if (this.settings.isMultiple) {\n                    if (option.selected) after = before.filter((o)=>o.id !== elementID);\n                    else after = before.concat(option);\n                }\n                if (!this.settings.isMultiple) {\n                    if (option.selected) after = [];\n                    else after = [\n                        option\n                    ];\n                }\n                if (!this.callbacks.beforeChange) shouldUpdate = true;\n                if (this.callbacks.beforeChange) {\n                    if (this.callbacks.beforeChange(after, before) === false) shouldUpdate = false;\n                    else shouldUpdate = true;\n                }\n                if (shouldUpdate) {\n                    if (!this.store.getOptionByID(elementID)) this.callbacks.addOption(option);\n                    this.callbacks.setSelected(after.map((o)=>o.value), false);\n                    if (this.settings.closeOnSelect) this.callbacks.close();\n                    if (this.callbacks.afterChange) this.callbacks.afterChange(after);\n                }\n            });\n            return optionEl;\n        }\n        destroy() {\n            this.main.main.remove();\n            this.content.main.remove();\n        }\n        highlightText(str, search, className) {\n            let completedString = str;\n            const regex = new RegExp(\"(\" + search.trim() + \")(?![^<]*>[^<>]*</)\", \"i\");\n            if (!str.match(regex)) return str;\n            const matchStartPosition = str.match(regex).index;\n            const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n            const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n            completedString = completedString.replace(regex, `<mark class=\"${className}\">${originalTextFoundByRegex}</mark>`);\n            return completedString;\n        }\n        moveContentAbove() {\n            const mainHeight = this.main.main.offsetHeight;\n            const contentHeight = this.content.main.offsetHeight;\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.classList.add(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.content.main.classList.add(this.classes.openAbove);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = \"-\" + (mainHeight + contentHeight - 1) + \"px 0px 0px 0px\";\n            this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + \"px\";\n            this.content.main.style.left = containerRect.left + window.scrollX + \"px\";\n            this.content.main.style.width = containerRect.width + \"px\";\n        }\n        moveContentBelow() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.add(this.classes.openBelow);\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.add(this.classes.openBelow);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = \"-1px 0px 0px 0px\";\n            if (this.settings.contentPosition !== \"relative\") {\n                this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + \"px\";\n                this.content.main.style.left = containerRect.left + window.scrollX + \"px\";\n                this.content.main.style.width = containerRect.width + \"px\";\n            }\n        }\n        ensureElementInView(container, element) {\n            const cTop = container.scrollTop + container.offsetTop;\n            const cBottom = cTop + container.clientHeight;\n            const eTop = element.offsetTop;\n            const eBottom = eTop + element.clientHeight;\n            if (eTop < cTop) container.scrollTop -= cTop - eTop;\n            else if (eBottom > cBottom) container.scrollTop += eBottom - cBottom;\n        }\n        putContent() {\n            const mainHeight = this.main.main.offsetHeight;\n            const mainRect = this.main.main.getBoundingClientRect();\n            const contentHeight = this.content.main.offsetHeight;\n            const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n            if (spaceBelow <= contentHeight) {\n                if (mainRect.top > contentHeight) return \"up\";\n                else return \"down\";\n            }\n            return \"down\";\n        }\n        updateDeselectAll() {\n            if (!this.store || !this.settings) return;\n            const selected = this.store.getSelectedOptions();\n            const hasSelectedItems = selected && selected.length > 0;\n            const isMultiple = this.settings.isMultiple;\n            const allowDeselect = this.settings.allowDeselect;\n            const deselectButton = this.main.deselect.main;\n            const hideClass = this.classes.hide;\n            if (allowDeselect && !(isMultiple && !hasSelectedItems)) deselectButton.classList.remove(hideClass);\n            else deselectButton.classList.add(hideClass);\n        }\n    }\n    class Select {\n        constructor(select){\n            this.listen = false;\n            this.observer = null;\n            this.select = select;\n            this.valueChange = this.valueChange.bind(this);\n            this.select.addEventListener(\"change\", this.valueChange, {\n                passive: true\n            });\n            this.observer = new MutationObserver(this.observeCall.bind(this));\n            this.changeListen(true);\n        }\n        enable() {\n            this.select.disabled = false;\n        }\n        disable() {\n            this.select.disabled = true;\n        }\n        hideUI() {\n            this.select.tabIndex = -1;\n            this.select.style.display = \"none\";\n            this.select.setAttribute(\"aria-hidden\", \"true\");\n        }\n        showUI() {\n            this.select.removeAttribute(\"tabindex\");\n            this.select.style.display = \"\";\n            this.select.removeAttribute(\"aria-hidden\");\n        }\n        changeListen(listen) {\n            this.listen = listen;\n            if (listen) {\n                if (this.observer) this.observer.observe(this.select, {\n                    subtree: true,\n                    childList: true,\n                    attributes: true\n                });\n            }\n            if (!listen) {\n                if (this.observer) this.observer.disconnect();\n            }\n        }\n        valueChange(ev) {\n            if (this.listen && this.onValueChange) this.onValueChange(this.getSelectedValues());\n            return true;\n        }\n        observeCall(mutations) {\n            if (!this.listen) return;\n            let classChanged = false;\n            let disabledChanged = false;\n            let optgroupOptionChanged = false;\n            for (const m of mutations){\n                if (m.target === this.select) {\n                    if (m.attributeName === \"disabled\") disabledChanged = true;\n                    if (m.attributeName === \"class\") classChanged = true;\n                }\n                if (m.target.nodeName === \"OPTGROUP\" || m.target.nodeName === \"OPTION\") optgroupOptionChanged = true;\n            }\n            if (classChanged && this.onClassChange) this.onClassChange(this.select.className.split(\" \"));\n            if (disabledChanged && this.onDisabledChange) {\n                this.changeListen(false);\n                this.onDisabledChange(this.select.disabled);\n                this.changeListen(true);\n            }\n            if (optgroupOptionChanged && this.onOptionsChange) {\n                this.changeListen(false);\n                this.onOptionsChange(this.getData());\n                this.changeListen(true);\n            }\n        }\n        getData() {\n            let data = [];\n            const nodes = this.select.childNodes;\n            for (const n of nodes){\n                if (n.nodeName === \"OPTGROUP\") data.push(this.getDataFromOptgroup(n));\n                if (n.nodeName === \"OPTION\") data.push(this.getDataFromOption(n));\n            }\n            return data;\n        }\n        getDataFromOptgroup(optgroup) {\n            let data = {\n                id: optgroup.id,\n                label: optgroup.label,\n                selectAll: optgroup.dataset ? optgroup.dataset.selectall === \"true\" : false,\n                selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : \"Select all\",\n                closable: optgroup.dataset ? optgroup.dataset.closable : \"off\",\n                options: []\n            };\n            const options = optgroup.childNodes;\n            for (const o of options)if (o.nodeName === \"OPTION\") data.options.push(this.getDataFromOption(o));\n            return data;\n        }\n        getDataFromOption(option) {\n            return {\n                id: option.id,\n                value: option.value,\n                text: option.text,\n                html: option.dataset && option.dataset.html ? option.dataset.html : \"\",\n                selected: option.selected,\n                display: option.style.display === \"none\" ? false : true,\n                disabled: option.disabled,\n                mandatory: option.dataset ? option.dataset.mandatory === \"true\" : false,\n                placeholder: option.dataset.placeholder === \"true\",\n                class: option.className,\n                style: option.style.cssText,\n                data: option.dataset\n            };\n        }\n        getSelectedValues() {\n            let values = [];\n            const options = this.select.childNodes;\n            for (const o of options){\n                if (o.nodeName === \"OPTGROUP\") {\n                    const optgroupOptions = o.childNodes;\n                    for (const oo of optgroupOptions)if (oo.nodeName === \"OPTION\") {\n                        const option = oo;\n                        if (option.selected) values.push(option.value);\n                    }\n                }\n                if (o.nodeName === \"OPTION\") {\n                    const option = o;\n                    if (option.selected) values.push(option.value);\n                }\n            }\n            return values;\n        }\n        setSelected(value) {\n            this.changeListen(false);\n            const options = this.select.childNodes;\n            for (const o of options){\n                if (o.nodeName === \"OPTGROUP\") {\n                    const optgroup = o;\n                    const optgroupOptions = optgroup.childNodes;\n                    for (const oo of optgroupOptions)if (oo.nodeName === \"OPTION\") {\n                        const option = oo;\n                        option.selected = value.includes(option.value);\n                    }\n                }\n                if (o.nodeName === \"OPTION\") {\n                    const option = o;\n                    option.selected = value.includes(option.value);\n                }\n            }\n            this.changeListen(true);\n        }\n        updateSelect(id, style, classes) {\n            this.changeListen(false);\n            if (id) this.select.dataset.id = id;\n            if (style) this.select.style.cssText = style;\n            if (classes) {\n                this.select.className = \"\";\n                classes.forEach((c)=>{\n                    if (c.trim() !== \"\") this.select.classList.add(c.trim());\n                });\n            }\n            this.changeListen(true);\n        }\n        updateOptions(data) {\n            this.changeListen(false);\n            this.select.innerHTML = \"\";\n            for (const d of data){\n                if (d instanceof Optgroup) this.select.appendChild(this.createOptgroup(d));\n                if (d instanceof Option) this.select.appendChild(this.createOption(d));\n            }\n            this.select.dispatchEvent(new Event(\"change\"));\n            this.changeListen(true);\n        }\n        createOptgroup(optgroup) {\n            const optgroupEl = document.createElement(\"optgroup\");\n            optgroupEl.id = optgroup.id;\n            optgroupEl.label = optgroup.label;\n            if (optgroup.selectAll) optgroupEl.dataset.selectAll = \"true\";\n            if (optgroup.closable !== \"off\") optgroupEl.dataset.closable = optgroup.closable;\n            if (optgroup.options) for (const o of optgroup.options)optgroupEl.appendChild(this.createOption(o));\n            return optgroupEl;\n        }\n        createOption(info) {\n            const optionEl = document.createElement(\"option\");\n            optionEl.id = info.id;\n            optionEl.value = info.value;\n            optionEl.innerHTML = info.text;\n            if (info.html !== \"\") optionEl.setAttribute(\"data-html\", info.html);\n            if (info.selected) optionEl.selected = info.selected;\n            if (info.disabled) optionEl.disabled = true;\n            if (info.display === false) optionEl.style.display = \"none\";\n            if (info.placeholder) optionEl.setAttribute(\"data-placeholder\", \"true\");\n            if (info.mandatory) optionEl.setAttribute(\"data-mandatory\", \"true\");\n            if (info.class) info.class.split(\" \").forEach((optionClass)=>{\n                optionEl.classList.add(optionClass);\n            });\n            if (info.data && typeof info.data === \"object\") Object.keys(info.data).forEach((key)=>{\n                optionEl.setAttribute(\"data-\" + kebabCase(key), info.data[key]);\n            });\n            return optionEl;\n        }\n        destroy() {\n            this.changeListen(false);\n            this.select.removeEventListener(\"change\", this.valueChange);\n            if (this.observer) {\n                this.observer.disconnect();\n                this.observer = null;\n            }\n            delete this.select.dataset.id;\n            this.showUI();\n        }\n    }\n    class SlimSelect {\n        constructor(config){\n            var _a;\n            this.events = {\n                search: undefined,\n                searchFilter: (opt, search)=>{\n                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n                },\n                addable: undefined,\n                beforeChange: undefined,\n                afterChange: undefined,\n                beforeOpen: undefined,\n                afterOpen: undefined,\n                beforeClose: undefined,\n                afterClose: undefined\n            };\n            this.windowResize = debounce(()=>{\n                if (!this.settings.isOpen && !this.settings.isFullOpen) return;\n                this.render.moveContent();\n            });\n            this.windowScroll = debounce(()=>{\n                if (!this.settings.isOpen && !this.settings.isFullOpen) return;\n                this.render.moveContent();\n            });\n            this.documentClick = (e)=>{\n                if (!this.settings.isOpen) return;\n                if (e.target && !hasClassInTree(e.target, this.settings.id)) this.close(e.type);\n            };\n            this.windowVisibilityChange = ()=>{\n                if (document.hidden) this.close();\n            };\n            this.selectEl = typeof config.select === \"string\" ? document.querySelector(config.select) : config.select;\n            if (!this.selectEl) {\n                if (config.events && config.events.error) config.events.error(new Error(\"Could not find select element\"));\n                return;\n            }\n            if (this.selectEl.tagName !== \"SELECT\") {\n                if (config.events && config.events.error) config.events.error(new Error(\"Element isnt of type select\"));\n                return;\n            }\n            if (this.selectEl.dataset.ssid) this.destroy();\n            this.settings = new Settings(config.settings);\n            const debounceEvents = [\n                \"afterChange\",\n                \"beforeOpen\",\n                \"afterOpen\",\n                \"beforeClose\",\n                \"afterClose\"\n            ];\n            for(const key in config.events){\n                if (!config.events.hasOwnProperty(key)) continue;\n                if (debounceEvents.indexOf(key) !== -1) this.events[key] = debounce(config.events[key], 100);\n                else this.events[key] = config.events[key];\n            }\n            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n            this.settings.isMultiple = this.selectEl.multiple;\n            this.settings.style = this.selectEl.style.cssText;\n            this.settings.class = this.selectEl.className.split(\" \");\n            this.select = new Select(this.selectEl);\n            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n            this.select.hideUI();\n            this.select.onValueChange = (values)=>{\n                this.setSelected(values);\n            };\n            this.select.onClassChange = (classes)=>{\n                this.settings.class = classes;\n                this.render.updateClassStyles();\n            };\n            this.select.onDisabledChange = (disabled)=>{\n                if (disabled) this.disable();\n                else this.enable();\n            };\n            this.select.onOptionsChange = (data)=>{\n                this.setData(data);\n            };\n            this.store = new Store(this.settings.isMultiple ? \"multiple\" : \"single\", config.data ? config.data : this.select.getData());\n            if (config.data) this.select.updateOptions(this.store.getData());\n            const callbacks = {\n                open: this.open.bind(this),\n                close: this.close.bind(this),\n                addable: this.events.addable ? this.events.addable : undefined,\n                setSelected: this.setSelected.bind(this),\n                addOption: this.addOption.bind(this),\n                search: this.search.bind(this),\n                beforeChange: this.events.beforeChange,\n                afterChange: this.events.afterChange\n            };\n            this.render = new Render(this.settings, this.store, callbacks);\n            this.render.renderValues();\n            this.render.renderOptions(this.store.getData());\n            const selectAriaLabel = this.selectEl.getAttribute(\"aria-label\");\n            const selectAriaLabelledBy = this.selectEl.getAttribute(\"aria-labelledby\");\n            if (selectAriaLabel) this.render.main.main.setAttribute(\"aria-label\", selectAriaLabel);\n            else if (selectAriaLabelledBy) this.render.main.main.setAttribute(\"aria-labelledby\", selectAriaLabelledBy);\n            if (this.selectEl.parentNode) this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n            document.addEventListener(\"click\", this.documentClick);\n            window.addEventListener(\"resize\", this.windowResize, false);\n            if (this.settings.openPosition === \"auto\") window.addEventListener(\"scroll\", this.windowScroll, false);\n            document.addEventListener(\"visibilitychange\", this.windowVisibilityChange);\n            if (this.settings.disabled) this.disable();\n            if (this.settings.alwaysOpen) this.open();\n            this.selectEl.slim = this;\n        }\n        enable() {\n            this.settings.disabled = false;\n            this.select.enable();\n            this.render.enable();\n        }\n        disable() {\n            this.settings.disabled = true;\n            this.select.disable();\n            this.render.disable();\n        }\n        getData() {\n            return this.store.getData();\n        }\n        setData(data) {\n            const selected = this.store.getSelected();\n            const err = this.store.validateDataArray(data);\n            if (err) {\n                if (this.events.error) this.events.error(err);\n                return;\n            }\n            this.store.setData(data);\n            const dataClean = this.store.getData();\n            this.select.updateOptions(dataClean);\n            this.render.renderValues();\n            this.render.renderOptions(dataClean);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n        }\n        getSelected() {\n            return this.store.getSelected();\n        }\n        setSelected(value, runAfterChange = true) {\n            const selected = this.store.getSelected();\n            this.store.setSelectedBy(\"value\", Array.isArray(value) ? value : [\n                value\n            ]);\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            if (this.render.content.search.input.value !== \"\") this.search(this.render.content.search.input.value);\n            else this.render.renderOptions(data);\n            if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n        }\n        addOption(option) {\n            const selected = this.store.getSelected();\n            if (!this.store.getDataOptions().some((o)=>{\n                var _a;\n                return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text);\n            })) this.store.addOption(option);\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            this.render.renderOptions(data);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) this.events.afterChange(this.store.getSelectedOptions());\n        }\n        open() {\n            if (this.settings.disabled || this.settings.isOpen) return;\n            if (this.events.beforeOpen) this.events.beforeOpen();\n            this.render.open();\n            if (this.settings.showSearch) this.render.searchFocus();\n            this.settings.isOpen = true;\n            setTimeout(()=>{\n                if (this.events.afterOpen) this.events.afterOpen();\n                if (this.settings.isOpen) this.settings.isFullOpen = true;\n            }, this.settings.timeoutDelay);\n            if (this.settings.contentPosition === \"absolute\") {\n                if (this.settings.intervalMove) clearInterval(this.settings.intervalMove);\n                this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n            }\n        }\n        close(eventType = null) {\n            if (!this.settings.isOpen || this.settings.alwaysOpen) return;\n            if (this.events.beforeClose) this.events.beforeClose();\n            this.render.close();\n            if (this.render.content.search.input.value !== \"\") this.search(\"\");\n            this.render.mainFocus(eventType);\n            this.settings.isOpen = false;\n            this.settings.isFullOpen = false;\n            setTimeout(()=>{\n                if (this.events.afterClose) this.events.afterClose();\n            }, this.settings.timeoutDelay);\n            if (this.settings.intervalMove) clearInterval(this.settings.intervalMove);\n        }\n        search(value) {\n            if (this.render.content.search.input.value !== value) this.render.content.search.input.value = value;\n            if (!this.events.search) {\n                this.render.renderOptions(value === \"\" ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n                return;\n            }\n            this.render.renderSearching();\n            const searchResp = this.events.search(value, this.store.getSelectedOptions());\n            if (searchResp instanceof Promise) {\n                searchResp.then((data)=>{\n                    this.render.renderOptions(this.store.partialToFullData(data));\n                }).catch((err)=>{\n                    this.render.renderError(typeof err === \"string\" ? err : err.message);\n                });\n                return;\n            } else if (Array.isArray(searchResp)) this.render.renderOptions(this.store.partialToFullData(searchResp));\n            else this.render.renderError(\"Search event must return a promise or an array of data\");\n        }\n        destroy() {\n            document.removeEventListener(\"click\", this.documentClick);\n            window.removeEventListener(\"resize\", this.windowResize, false);\n            if (this.settings.openPosition === \"auto\") window.removeEventListener(\"scroll\", this.windowScroll, false);\n            document.removeEventListener(\"visibilitychange\", this.windowVisibilityChange);\n            this.store.setData([]);\n            this.render.destroy();\n            this.select.destroy();\n        }\n    }\n    return SlimSelect;\n});\n\n\n\nconst $1f0dc3b9307be026$var$ref = {\n    select: document.querySelector(\"select.breed-select\"),\n    catInfo: document.querySelector(\".cat-info\"),\n    loader: document.querySelector(\".loader\"),\n    error: document.querySelector(\".error\")\n};\n$1f0dc3b9307be026$var$ref.loader.innerHTML = \"\";\n$1f0dc3b9307be026$var$ref.loader.classList.replace(\"is-hidden\", \"loader\");\n$1f0dc3b9307be026$var$ref.error.classList.add(\"is-hidden\");\n$1f0dc3b9307be026$var$ref.catInfo.classList.add(\"is-hidden\");\n// ===============================COLLECTION-BREEDS=====================================\nconst $1f0dc3b9307be026$var$getCat = (0, $6b5f202d1456c0af$export$913382e0b15b5503)().then((value)=>{\n    option = (0, $549b64263ce2af2d$export$e2882820f72b6fb0)(value);\n    $1f0dc3b9307be026$var$ref.select.insertAdjacentHTML(\"beforeend\", option);\n    new (0, (/*@__PURE__*/$parcel$interopDefault($f753f16ae3da2a89$exports)))({\n        select: \".breed-select\"\n    });\n}).catch((error)=>{\n    $1f0dc3b9307be026$var$ref.error.classList.remove(\"is-hidden\");\n}).finally(()=>{\n    $1f0dc3b9307be026$var$ref.loader.classList.replace(\"loader\", \"is-hidden\");\n});\n// ===============================INFORMATION-ABOUT-CAT==================================\nconst $1f0dc3b9307be026$var$getCatsInfo = (e)=>{\n    $1f0dc3b9307be026$var$ref.loader.innerHTML = \"\";\n    $1f0dc3b9307be026$var$ref.loader.classList.replace(\"is-hidden\", \"loader\");\n    $1f0dc3b9307be026$var$ref.error.classList.add(\"is-hidden\");\n    const breedId = e.currentTarget.value;\n    (0, $6b5f202d1456c0af$export$57b7d3a597416aa2)(breedId).then((res)=>{\n        $1f0dc3b9307be026$var$ref.catInfo.classList.remove(\"is-hidden\");\n        $1f0dc3b9307be026$var$ref.catInfo.innerHTML = (0, $549b64263ce2af2d$export$ce252ca49f67e4ee)(res);\n    }).catch((error)=>{\n        $1f0dc3b9307be026$var$ref.error.classList.remove(\"is-hidden\");\n    }).finally(()=>{\n        $1f0dc3b9307be026$var$ref.loader.classList.replace(\"loader\", \"is-hidden\");\n    });\n};\n$1f0dc3b9307be026$var$ref.select.addEventListener(\"change\", $1f0dc3b9307be026$var$getCatsInfo); // ===============================ERROR-HANDLING=========================================\n // console.log(1);\n\n\n//# sourceMappingURL=index.ff925a90.js.map\n","import { fetchBreeds, fetchCatByBreed } from '../src/cat-api';\nimport { createOption, catInfo } from '../src/create-markUp';\nimport SlimSelect from 'slim-select';\nimport 'slim-select/dist/slimselect.css';\n\nconst ref = {\n  select: document.querySelector('select.breed-select'),\n  catInfo: document.querySelector('.cat-info'),\n  loader: document.querySelector('.loader'),\n  error: document.querySelector('.error'),\n};\n\nref.loader.innerHTML = '';\nref.loader.classList.replace('is-hidden', 'loader');\nref.error.classList.add('is-hidden');\nref.catInfo.classList.add('is-hidden');\n\n// ===============================COLLECTION-BREEDS=====================================\n\nconst getCat = fetchBreeds()\n  .then(value => {\n    option = createOption(value);\n    ref.select.insertAdjacentHTML('beforeend', option);\n    new SlimSelect({\n      select: '.breed-select',\n    });\n  })\n  .catch(error => {\n    ref.error.classList.remove('is-hidden');\n  })\n  .finally(() => {\n    ref.loader.classList.replace('loader', 'is-hidden');\n  });\n\n// ===============================INFORMATION-ABOUT-CAT==================================\nconst getCatsInfo = e => {\n  ref.loader.innerHTML = '';\n  ref.loader.classList.replace('is-hidden', 'loader');\n  ref.error.classList.add('is-hidden');\n\n  const breedId = e.currentTarget.value;\n\n  fetchCatByBreed(breedId)\n    .then(res => {\n      ref.catInfo.classList.remove('is-hidden');\n      ref.catInfo.innerHTML = catInfo(res);\n    })\n    .catch(error => {\n      ref.error.classList.remove('is-hidden');\n    })\n    .finally(() => {\n      ref.loader.classList.replace('loader', 'is-hidden');\n    });\n};\nref.select.addEventListener('change', getCatsInfo);\n\n// ===============================ERROR-HANDLING=========================================\n// console.log(1);\n","const api_key =\n  'live_gAL7JxmbjUU6gxkKBGgnlTuJEB3afNUZML5GYiRMmv5TP64TOpSgjuODdnlX0S1n';\n\nconst BASE_URL = 'https://api.thecatapi.com';\nconst END_POINT = '/v1/breeds';\nconst url = `${BASE_URL}${END_POINT}?api_key=${api_key}`;\nconst END_POINT2 = '/v1/images/search';\n\nfunction fetchBreeds() {\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nfunction fetchCatByBreed(breedId) {\n  return fetch(\n    `${BASE_URL}${END_POINT2}?api_key=${api_key}&breed_ids=${breedId}`\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\nexport { fetchBreeds, fetchCatByBreed };\n","function createOption(value) {\n  let option = value.map(el => {\n    return `<option value=\"${el.id}\">${el.name}</option>`;\n  });\n  return option;\n}\nfunction catInfo(res) {\n  return `<div class=\"cat-info\">\n      <img src=\"${res[0].url}\" alt=\"${res[0].breeds[0].name}\" width=\"400\" />\n      <p class=\"descr\">${res[0].breeds[0].description}</p>\n      <p class=\"temperament\">Temperament: ${res[0].breeds[0].temperament}</p>\n    </div>`;\n}\n\nexport { createOption, catInfo };\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.SlimSelect = factory());\n})(this, (function () { 'use strict';\n\n    function generateID() {\n        return Math.random().toString(36).substring(2, 10);\n    }\n    function hasClassInTree(element, className) {\n        function hasClass(e, c) {\n            if (c && e && e.classList && e.classList.contains(c)) {\n                return e;\n            }\n            if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {\n                return e;\n            }\n            return null;\n        }\n        function parentByClass(e, c) {\n            if (!e || e === document) {\n                return null;\n            }\n            else if (hasClass(e, c)) {\n                return e;\n            }\n            else {\n                return parentByClass(e.parentNode, c);\n            }\n        }\n        return hasClass(element, className) || parentByClass(element, className);\n    }\n    function debounce(func, wait = 50, immediate = false) {\n        let timeout;\n        return function (...args) {\n            const context = self;\n            const later = () => {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            };\n            const callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) {\n                func.apply(context, args);\n            }\n        };\n    }\n    function isEqual(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    function kebabCase(str) {\n        const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match) => '-' + match.toLowerCase());\n        return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n    }\n\n    class Settings {\n        constructor(settings) {\n            this.id = '';\n            this.style = '';\n            this.class = [];\n            this.isMultiple = false;\n            this.isOpen = false;\n            this.isFullOpen = false;\n            this.intervalMove = null;\n            if (!settings) {\n                settings = {};\n            }\n            this.id = 'ss-' + generateID();\n            this.style = settings.style || '';\n            this.class = settings.class || [];\n            this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n            this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n            this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n            this.ariaLabel = settings.ariaLabel || 'Combobox';\n            this.searchPlaceholder = settings.searchPlaceholder || 'Search';\n            this.searchText = settings.searchText || 'No Results';\n            this.searchingText = settings.searchingText || 'Searching...';\n            this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n            this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n            this.contentLocation = settings.contentLocation || document.body;\n            this.contentPosition = settings.contentPosition || 'absolute';\n            this.openPosition = settings.openPosition || 'auto';\n            this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value';\n            this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n            this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n            this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n            this.minSelected = settings.minSelected || 0;\n            this.maxSelected = settings.maxSelected || 1000;\n            this.timeoutDelay = settings.timeoutDelay || 200;\n            this.maxValuesShown = settings.maxValuesShown || 20;\n            this.maxValuesMessage = settings.maxValuesMessage || '{number} selected';\n        }\n    }\n\n    class Optgroup {\n        constructor(optgroup) {\n            this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id;\n            this.label = optgroup.label || '';\n            this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n            this.selectAllText = optgroup.selectAllText || 'Select All';\n            this.closable = optgroup.closable || 'off';\n            this.options = [];\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    this.options.push(new Option(o));\n                }\n            }\n        }\n    }\n    class Option {\n        constructor(option) {\n            this.id = !option.id || option.id === '' ? generateID() : option.id;\n            this.value = option.value === undefined ? option.text : option.value;\n            this.text = option.text || '';\n            this.html = option.html || '';\n            this.selected = option.selected !== undefined ? option.selected : false;\n            this.display = option.display !== undefined ? option.display : true;\n            this.disabled = option.disabled !== undefined ? option.disabled : false;\n            this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n            this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n            this.class = option.class || '';\n            this.style = option.style || '';\n            this.data = option.data || {};\n        }\n    }\n    class Store {\n        constructor(type, data) {\n            this.selectType = 'single';\n            this.data = [];\n            this.selectType = type;\n            this.setData(data);\n        }\n        validateDataArray(data) {\n            if (!Array.isArray(data)) {\n                return new Error('Data must be an array');\n            }\n            for (let dataObj of data) {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    if (!('label' in dataObj)) {\n                        return new Error('Optgroup must have a label');\n                    }\n                    if ('options' in dataObj && dataObj.options) {\n                        for (let option of dataObj.options) {\n                            return this.validateOption(option);\n                        }\n                    }\n                }\n                else if (dataObj instanceof Option || 'text' in dataObj) {\n                    return this.validateOption(dataObj);\n                }\n                else {\n                    return new Error('Data object must be a valid optgroup or option');\n                }\n            }\n            return null;\n        }\n        validateOption(option) {\n            if (!('text' in option)) {\n                return new Error('Option must have a text');\n            }\n            return null;\n        }\n        partialToFullData(data) {\n            let dataFinal = [];\n            data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                    let optOptions = [];\n                    if ('options' in dataObj && dataObj.options) {\n                        dataObj.options.forEach((option) => {\n                            optOptions.push(new Option(option));\n                        });\n                    }\n                    if (optOptions.length > 0) {\n                        dataFinal.push(new Optgroup(dataObj));\n                    }\n                }\n                if (dataObj instanceof Option || 'text' in dataObj) {\n                    dataFinal.push(new Option(dataObj));\n                }\n            });\n            return dataFinal;\n        }\n        setData(data) {\n            this.data = this.partialToFullData(data);\n            if (this.selectType === 'single') {\n                this.setSelectedBy('value', this.getSelected());\n            }\n        }\n        getData() {\n            return this.filter(null, true);\n        }\n        getDataOptions() {\n            return this.filter(null, false);\n        }\n        addOption(option) {\n            this.setData(this.getData().concat(new Option(option)));\n        }\n        setSelectedBy(selectedType, selectedValues) {\n            let firstOption = null;\n            let hasSelected = false;\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup) {\n                    for (let option of dataObj.options) {\n                        if (!firstOption) {\n                            firstOption = option;\n                        }\n                        option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                        if (option.selected && this.selectType === 'single') {\n                            hasSelected = true;\n                        }\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!firstOption) {\n                        firstOption = dataObj;\n                    }\n                    dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                    if (dataObj.selected && this.selectType === 'single') {\n                        hasSelected = true;\n                    }\n                }\n            }\n            if (this.selectType === 'single' && firstOption && !hasSelected) {\n                firstOption.selected = true;\n            }\n        }\n        getSelected() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedValues = [];\n            selectedOptions.forEach((option) => {\n                selectedValues.push(option.value);\n            });\n            return selectedValues;\n        }\n        getSelectedOptions() {\n            return this.filter((opt) => {\n                return opt.selected;\n            }, false);\n        }\n        getSelectedIDs() {\n            let selectedOptions = this.getSelectedOptions();\n            let selectedIDs = [];\n            selectedOptions.forEach((op) => {\n                selectedIDs.push(op.id);\n            });\n            return selectedIDs;\n        }\n        getOptgroupByID(id) {\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup && dataObj.id === id) {\n                    return dataObj;\n                }\n            }\n            return null;\n        }\n        getOptionByID(id) {\n            let options = this.filter((opt) => {\n                return opt.id === id;\n            }, false);\n            return options.length ? options[0] : null;\n        }\n        getSelectType() {\n            return this.selectType;\n        }\n        getFirstOption() {\n            let option = null;\n            for (let dataObj of this.data) {\n                if (dataObj instanceof Optgroup) {\n                    option = dataObj.options[0];\n                }\n                else if (dataObj instanceof Option) {\n                    option = dataObj;\n                }\n                if (option) {\n                    break;\n                }\n            }\n            return option;\n        }\n        search(search, searchFilter) {\n            search = search.trim();\n            if (search === '') {\n                return this.getData();\n            }\n            return this.filter((opt) => {\n                return searchFilter(opt, search);\n            }, true);\n        }\n        filter(filter, includeOptgroup) {\n            const dataSearch = [];\n            this.data.forEach((dataObj) => {\n                if (dataObj instanceof Optgroup) {\n                    let optOptions = [];\n                    dataObj.options.forEach((option) => {\n                        if (!filter || filter(option)) {\n                            if (!includeOptgroup) {\n                                dataSearch.push(new Option(option));\n                            }\n                            else {\n                                optOptions.push(new Option(option));\n                            }\n                        }\n                    });\n                    if (optOptions.length > 0) {\n                        let optgroup = new Optgroup(dataObj);\n                        optgroup.options = optOptions;\n                        dataSearch.push(optgroup);\n                    }\n                }\n                if (dataObj instanceof Option) {\n                    if (!filter || filter(dataObj)) {\n                        dataSearch.push(new Option(dataObj));\n                    }\n                }\n            });\n            return dataSearch;\n        }\n    }\n\n    class Render {\n        constructor(settings, store, callbacks) {\n            this.classes = {\n                main: 'ss-main',\n                placeholder: 'ss-placeholder',\n                values: 'ss-values',\n                single: 'ss-single',\n                max: 'ss-max',\n                value: 'ss-value',\n                valueText: 'ss-value-text',\n                valueDelete: 'ss-value-delete',\n                valueOut: 'ss-value-out',\n                deselect: 'ss-deselect',\n                deselectPath: 'M10,10 L90,90 M10,90 L90,10',\n                arrow: 'ss-arrow',\n                arrowClose: 'M10,30 L50,70 L90,30',\n                arrowOpen: 'M10,70 L50,30 L90,70',\n                content: 'ss-content',\n                openAbove: 'ss-open-above',\n                openBelow: 'ss-open-below',\n                search: 'ss-search',\n                searchHighlighter: 'ss-search-highlight',\n                searching: 'ss-searching',\n                addable: 'ss-addable',\n                addablePath: 'M50,10 L50,90 M10,50 L90,50',\n                list: 'ss-list',\n                optgroup: 'ss-optgroup',\n                optgroupLabel: 'ss-optgroup-label',\n                optgroupLabelText: 'ss-optgroup-label-text',\n                optgroupActions: 'ss-optgroup-actions',\n                optgroupSelectAll: 'ss-selectall',\n                optgroupSelectAllBox: 'M60,10 L10,10 L10,90 L90,90 L90,50',\n                optgroupSelectAllCheck: 'M30,45 L50,70 L90,10',\n                optgroupClosable: 'ss-closable',\n                option: 'ss-option',\n                optionDelete: 'M10,10 L90,90 M10,90 L90,10',\n                highlighted: 'ss-highlighted',\n                open: 'ss-open',\n                close: 'ss-close',\n                selected: 'ss-selected',\n                error: 'ss-error',\n                disabled: 'ss-disabled',\n                hide: 'ss-hide',\n            };\n            this.store = store;\n            this.settings = settings;\n            this.callbacks = callbacks;\n            this.main = this.mainDiv();\n            this.content = this.contentDiv();\n            this.updateClassStyles();\n            this.updateAriaAttributes();\n            this.settings.contentLocation.appendChild(this.content.main);\n        }\n        enable() {\n            this.main.main.classList.remove(this.classes.disabled);\n            this.content.search.input.disabled = false;\n        }\n        disable() {\n            this.main.main.classList.add(this.classes.disabled);\n            this.content.search.input.disabled = true;\n        }\n        open() {\n            this.main.arrow.path.setAttribute('d', this.classes.arrowOpen);\n            this.main.main.classList.add(this.settings.openPosition === 'up' ? this.classes.openAbove : this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'true');\n            this.moveContent();\n            const selectedOptions = this.store.getSelectedOptions();\n            if (selectedOptions.length) {\n                const selectedId = selectedOptions[selectedOptions.length - 1].id;\n                const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n                if (selectedOption) {\n                    this.ensureElementInView(this.content.list, selectedOption);\n                }\n            }\n        }\n        close() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.main.arrow.path.setAttribute('d', this.classes.arrowClose);\n        }\n        updateClassStyles() {\n            this.main.main.className = '';\n            this.main.main.removeAttribute('style');\n            this.content.main.className = '';\n            this.content.main.removeAttribute('style');\n            this.main.main.classList.add(this.classes.main);\n            this.content.main.classList.add(this.classes.content);\n            if (this.settings.style !== '') {\n                this.main.main.style.cssText = this.settings.style;\n                this.content.main.style.cssText = this.settings.style;\n            }\n            if (this.settings.class.length) {\n                for (const c of this.settings.class) {\n                    if (c.trim() !== '') {\n                        this.main.main.classList.add(c.trim());\n                        this.content.main.classList.add(c.trim());\n                    }\n                }\n            }\n            if (this.settings.contentPosition === 'relative') {\n                this.content.main.classList.add('ss-' + this.settings.contentPosition);\n            }\n        }\n        updateAriaAttributes() {\n            this.main.main.role = 'combobox';\n            this.main.main.setAttribute('aria-haspopup', 'listbox');\n            this.main.main.setAttribute('aria-controls', this.content.main.id);\n            this.main.main.setAttribute('aria-expanded', 'false');\n            this.content.main.setAttribute('role', 'listbox');\n        }\n        mainDiv() {\n            var _a;\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            main.setAttribute('aria-label', this.settings.ariaLabel);\n            main.tabIndex = 0;\n            main.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        this.callbacks.open();\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Enter':\n                    case ' ':\n                        this.callbacks.open();\n                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                        if (highlighted) {\n                            highlighted.click();\n                        }\n                        return false;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                }\n                return false;\n            };\n            main.onclick = (e) => {\n                if (this.settings.disabled) {\n                    return;\n                }\n                this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();\n            };\n            const values = document.createElement('div');\n            values.classList.add(this.classes.values);\n            main.appendChild(values);\n            const deselect = document.createElement('div');\n            deselect.classList.add(this.classes.deselect);\n            const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n            if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {\n                deselect.classList.add(this.classes.hide);\n            }\n            else {\n                deselect.classList.remove(this.classes.hide);\n            }\n            deselect.onclick = (e) => {\n                e.stopPropagation();\n                if (this.settings.disabled) {\n                    return;\n                }\n                let shouldDelete = true;\n                const before = this.store.getSelectedOptions();\n                const after = [];\n                if (this.callbacks.beforeChange) {\n                    shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                }\n                if (shouldDelete) {\n                    if (this.settings.isMultiple) {\n                        this.callbacks.setSelected([], false);\n                        this.updateDeselectAll();\n                    }\n                    else {\n                        const firstOption = this.store.getFirstOption();\n                        const value = firstOption ? firstOption.value : '';\n                        this.callbacks.setSelected(value, false);\n                    }\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(this.store.getSelectedOptions());\n                    }\n                }\n            };\n            const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            deselectSvg.setAttribute('viewBox', '0 0 100 100');\n            const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            deselectPath.setAttribute('d', this.classes.deselectPath);\n            deselectSvg.appendChild(deselectPath);\n            deselect.appendChild(deselectSvg);\n            main.appendChild(deselect);\n            const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            arrow.classList.add(this.classes.arrow);\n            arrow.setAttribute('viewBox', '0 0 100 100');\n            const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            arrowPath.setAttribute('d', this.classes.arrowClose);\n            if (this.settings.alwaysOpen) {\n                arrow.classList.add(this.classes.hide);\n            }\n            arrow.appendChild(arrowPath);\n            main.appendChild(arrow);\n            return {\n                main: main,\n                values: values,\n                deselect: {\n                    main: deselect,\n                    svg: deselectSvg,\n                    path: deselectPath,\n                },\n                arrow: {\n                    main: arrow,\n                    path: arrowPath,\n                },\n            };\n        }\n        mainFocus(eventType) {\n            if (eventType !== 'click') {\n                this.main.main.focus({ preventScroll: true });\n            }\n        }\n        placeholder() {\n            const placeholderOption = this.store.filter((o) => o.placeholder, false);\n            let placeholderText = this.settings.placeholderText;\n            if (placeholderOption.length) {\n                if (placeholderOption[0].html !== '') {\n                    placeholderText = placeholderOption[0].html;\n                }\n                else if (placeholderOption[0].text !== '') {\n                    placeholderText = placeholderOption[0].text;\n                }\n            }\n            const placeholder = document.createElement('div');\n            placeholder.classList.add(this.classes.placeholder);\n            placeholder.innerHTML = placeholderText;\n            return placeholder;\n        }\n        renderValues() {\n            if (!this.settings.isMultiple) {\n                this.renderSingleValue();\n                return;\n            }\n            this.renderMultipleValues();\n        }\n        renderSingleValue() {\n            const selected = this.store.filter((o) => {\n                return o.selected && !o.placeholder;\n            }, false);\n            const selectedSingle = selected.length > 0 ? selected[0] : null;\n            if (!selectedSingle) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n            }\n            else {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.single);\n                if (selectedSingle.html) {\n                    singleValue.innerHTML = selectedSingle.html;\n                }\n                else {\n                    singleValue.innerText = selectedSingle.text;\n                }\n                this.main.values.innerHTML = singleValue.outerHTML;\n            }\n            if (!this.settings.allowDeselect || !selected.length) {\n                this.main.deselect.main.classList.add(this.classes.hide);\n            }\n            else {\n                this.main.deselect.main.classList.remove(this.classes.hide);\n            }\n        }\n        renderMultipleValues() {\n            let currentNodes = this.main.values.childNodes;\n            let selectedOptions = this.store.filter((opt) => {\n                return opt.selected && opt.display;\n            }, false);\n            if (selectedOptions.length === 0) {\n                this.main.values.innerHTML = this.placeholder().outerHTML;\n                return;\n            }\n            else {\n                const placeholder = this.main.values.querySelector('.' + this.classes.placeholder);\n                if (placeholder) {\n                    placeholder.remove();\n                }\n            }\n            if (selectedOptions.length > this.settings.maxValuesShown) {\n                const singleValue = document.createElement('div');\n                singleValue.classList.add(this.classes.max);\n                singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString());\n                this.main.values.innerHTML = singleValue.outerHTML;\n                return;\n            }\n            else {\n                const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max);\n                if (maxValuesMessage) {\n                    maxValuesMessage.remove();\n                }\n            }\n            let removeNodes = [];\n            for (let i = 0; i < currentNodes.length; i++) {\n                const node = currentNodes[i];\n                const id = node.getAttribute('data-id');\n                if (id) {\n                    const found = selectedOptions.filter((opt) => {\n                        return opt.id === id;\n                    }, false);\n                    if (!found.length) {\n                        removeNodes.push(node);\n                    }\n                }\n            }\n            for (const n of removeNodes) {\n                n.classList.add(this.classes.valueOut);\n                setTimeout(() => {\n                    if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {\n                        this.main.values.removeChild(n);\n                    }\n                }, 100);\n            }\n            currentNodes = this.main.values.childNodes;\n            for (let d = 0; d < selectedOptions.length; d++) {\n                let shouldAdd = true;\n                for (let i = 0; i < currentNodes.length; i++) {\n                    if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {\n                        shouldAdd = false;\n                    }\n                }\n                if (shouldAdd) {\n                    if (currentNodes.length === 0) {\n                        this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                    }\n                    else if (d === 0) {\n                        this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                    }\n                    else {\n                        currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]));\n                    }\n                }\n            }\n            this.updateDeselectAll();\n        }\n        multipleValue(option) {\n            const value = document.createElement('div');\n            value.classList.add(this.classes.value);\n            value.dataset.id = option.id;\n            const text = document.createElement('div');\n            text.classList.add(this.classes.valueText);\n            text.innerText = option.text;\n            value.appendChild(text);\n            if (!option.mandatory) {\n                const deleteDiv = document.createElement('div');\n                deleteDiv.classList.add(this.classes.valueDelete);\n                deleteDiv.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.settings.disabled) {\n                        return;\n                    }\n                    let shouldDelete = true;\n                    const before = this.store.getSelectedOptions();\n                    const after = before.filter((o) => {\n                        return o.selected && o.id !== option.id;\n                    }, true);\n                    if (this.settings.minSelected && after.length < this.settings.minSelected) {\n                        return;\n                    }\n                    if (this.callbacks.beforeChange) {\n                        shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                    }\n                    if (shouldDelete) {\n                        let selectedValues = [];\n                        for (const o of after) {\n                            if (o instanceof Optgroup) {\n                                for (const c of o.options) {\n                                    selectedValues.push(c.value);\n                                }\n                            }\n                            if (o instanceof Option) {\n                                selectedValues.push(o.value);\n                            }\n                        }\n                        this.callbacks.setSelected(selectedValues, false);\n                        if (this.settings.closeOnSelect) {\n                            this.callbacks.close();\n                        }\n                        if (this.callbacks.afterChange) {\n                            this.callbacks.afterChange(after);\n                        }\n                        this.updateDeselectAll();\n                    }\n                };\n                const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                deleteSvg.setAttribute('viewBox', '0 0 100 100');\n                const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                deletePath.setAttribute('d', this.classes.optionDelete);\n                deleteSvg.appendChild(deletePath);\n                deleteDiv.appendChild(deleteSvg);\n                value.appendChild(deleteDiv);\n            }\n            return value;\n        }\n        contentDiv() {\n            const main = document.createElement('div');\n            main.dataset.id = this.settings.id;\n            const search = this.searchDiv();\n            main.appendChild(search.main);\n            const list = this.listDiv();\n            main.appendChild(list);\n            return {\n                main: main,\n                search: search,\n                list: list,\n            };\n        }\n        moveContent() {\n            if (this.settings.contentPosition === 'relative') {\n                this.moveContentBelow();\n                return;\n            }\n            if (this.settings.openPosition === 'down') {\n                this.moveContentBelow();\n                return;\n            }\n            else if (this.settings.openPosition === 'up') {\n                this.moveContentAbove();\n                return;\n            }\n            if (this.putContent() === 'up') {\n                this.moveContentAbove();\n            }\n            else {\n                this.moveContentBelow();\n            }\n        }\n        searchDiv() {\n            const main = document.createElement('div');\n            const input = document.createElement('input');\n            const addable = document.createElement('div');\n            main.classList.add(this.classes.search);\n            const searchReturn = {\n                main,\n                input,\n            };\n            if (!this.settings.showSearch) {\n                main.classList.add(this.classes.hide);\n                input.readOnly = true;\n            }\n            input.type = 'search';\n            input.placeholder = this.settings.searchPlaceholder;\n            input.tabIndex = -1;\n            input.setAttribute('aria-label', this.settings.searchPlaceholder);\n            input.setAttribute('autocapitalize', 'off');\n            input.setAttribute('autocomplete', 'off');\n            input.setAttribute('autocorrect', 'off');\n            input.oninput = debounce((e) => {\n                this.callbacks.search(e.target.value);\n            }, 100);\n            input.onkeydown = (e) => {\n                switch (e.key) {\n                    case 'ArrowUp':\n                    case 'ArrowDown':\n                        e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                        return false;\n                    case 'Tab':\n                        this.callbacks.close();\n                        return true;\n                    case 'Escape':\n                        this.callbacks.close();\n                        return false;\n                    case 'Enter':\n                    case ' ':\n                        if (this.callbacks.addable && e.ctrlKey) {\n                            addable.click();\n                            return false;\n                        }\n                        else {\n                            const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                            if (highlighted) {\n                                highlighted.click();\n                                return false;\n                            }\n                        }\n                        return true;\n                }\n                return true;\n            };\n            main.appendChild(input);\n            if (this.callbacks.addable) {\n                addable.classList.add(this.classes.addable);\n                const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                plus.setAttribute('viewBox', '0 0 100 100');\n                const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                plusPath.setAttribute('d', this.classes.addablePath);\n                plus.appendChild(plusPath);\n                addable.appendChild(plus);\n                addable.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (!this.callbacks.addable) {\n                        return;\n                    }\n                    const inputValue = this.content.search.input.value.trim();\n                    if (inputValue === '') {\n                        this.content.search.input.focus();\n                        return;\n                    }\n                    const runFinish = (oo) => {\n                        let newOption = new Option(oo);\n                        this.callbacks.addOption(newOption);\n                        if (this.settings.isMultiple) {\n                            let values = this.store.getSelected();\n                            values.push(newOption.value);\n                            this.callbacks.setSelected(values, true);\n                        }\n                        else {\n                            this.callbacks.setSelected([newOption.value], true);\n                        }\n                        this.callbacks.search('');\n                        if (this.settings.closeOnSelect) {\n                            setTimeout(() => {\n                                this.callbacks.close();\n                            }, 100);\n                        }\n                    };\n                    const addableValue = this.callbacks.addable(inputValue);\n                    if (addableValue === false || addableValue === undefined || addableValue === null) {\n                        return;\n                    }\n                    if (addableValue instanceof Promise) {\n                        addableValue.then((value) => {\n                            if (typeof value === 'string') {\n                                runFinish({\n                                    text: value,\n                                    value: value,\n                                });\n                            }\n                            else {\n                                runFinish(value);\n                            }\n                        });\n                    }\n                    else if (typeof addableValue === 'string') {\n                        runFinish({\n                            text: addableValue,\n                            value: addableValue,\n                        });\n                    }\n                    else {\n                        runFinish(addableValue);\n                    }\n                    return;\n                };\n                main.appendChild(addable);\n                searchReturn.addable = {\n                    main: addable,\n                    svg: plus,\n                    path: plusPath,\n                };\n            }\n            return searchReturn;\n        }\n        searchFocus() {\n            this.content.search.input.focus();\n        }\n        getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {\n            let query = '.' + this.classes.option;\n            if (notPlaceholder) {\n                query += ':not(.' + this.classes.placeholder + ')';\n            }\n            if (notDisabled) {\n                query += ':not(.' + this.classes.disabled + ')';\n            }\n            if (notHidden) {\n                query += ':not(.' + this.classes.hide + ')';\n            }\n            return Array.from(this.content.list.querySelectorAll(query));\n        }\n        highlight(dir) {\n            const options = this.getOptions(true, true, true);\n            if (options.length === 0) {\n                return;\n            }\n            if (options.length === 1) {\n                if (!options[0].classList.contains(this.classes.highlighted)) {\n                    options[0].classList.add(this.classes.highlighted);\n                    return;\n                }\n            }\n            let highlighted = false;\n            for (const o of options) {\n                if (o.classList.contains(this.classes.highlighted)) {\n                    highlighted = true;\n                }\n            }\n            if (!highlighted) {\n                for (const o of options) {\n                    if (o.classList.contains(this.classes.selected)) {\n                        o.classList.add(this.classes.highlighted);\n                        break;\n                    }\n                }\n            }\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].classList.contains(this.classes.highlighted)) {\n                    const prevOption = options[i];\n                    prevOption.classList.remove(this.classes.highlighted);\n                    const prevParent = prevOption.parentElement;\n                    if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                        const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    let selectOption = options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1];\n                    selectOption.classList.add(this.classes.highlighted);\n                    this.ensureElementInView(this.content.list, selectOption);\n                    const selectParent = selectOption.parentElement;\n                    if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                        const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel);\n                        if (optgroupLabel) {\n                            optgroupLabel.click();\n                        }\n                    }\n                    return;\n                }\n            }\n            options[dir === 'down' ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n            this.ensureElementInView(this.content.list, options[dir === 'down' ? 0 : options.length - 1]);\n        }\n        listDiv() {\n            const options = document.createElement('div');\n            options.classList.add(this.classes.list);\n            return options;\n        }\n        renderError(error) {\n            this.content.list.innerHTML = '';\n            const errorDiv = document.createElement('div');\n            errorDiv.classList.add(this.classes.error);\n            errorDiv.textContent = error;\n            this.content.list.appendChild(errorDiv);\n        }\n        renderSearching() {\n            this.content.list.innerHTML = '';\n            const searchingDiv = document.createElement('div');\n            searchingDiv.classList.add(this.classes.searching);\n            searchingDiv.textContent = this.settings.searchingText;\n            this.content.list.appendChild(searchingDiv);\n        }\n        renderOptions(data) {\n            this.content.list.innerHTML = '';\n            if (data.length === 0) {\n                const noResults = document.createElement('div');\n                noResults.classList.add(this.classes.search);\n                noResults.innerHTML = this.settings.searchText;\n                this.content.list.appendChild(noResults);\n                return;\n            }\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    const optgroupEl = document.createElement('div');\n                    optgroupEl.classList.add(this.classes.optgroup);\n                    const optgroupLabel = document.createElement('div');\n                    optgroupLabel.classList.add(this.classes.optgroupLabel);\n                    optgroupEl.appendChild(optgroupLabel);\n                    const optgroupLabelText = document.createElement('div');\n                    optgroupLabelText.classList.add(this.classes.optgroupLabelText);\n                    optgroupLabelText.textContent = d.label;\n                    optgroupLabel.appendChild(optgroupLabelText);\n                    const optgroupActions = document.createElement('div');\n                    optgroupActions.classList.add(this.classes.optgroupActions);\n                    optgroupLabel.appendChild(optgroupActions);\n                    if (this.settings.isMultiple && d.selectAll) {\n                        const selectAll = document.createElement('div');\n                        selectAll.classList.add(this.classes.optgroupSelectAll);\n                        let allSelected = true;\n                        for (const o of d.options) {\n                            if (!o.selected) {\n                                allSelected = false;\n                                break;\n                            }\n                        }\n                        if (allSelected) {\n                            selectAll.classList.add(this.classes.selected);\n                        }\n                        const selectAllText = document.createElement('span');\n                        selectAllText.textContent = d.selectAllText;\n                        selectAll.appendChild(selectAllText);\n                        const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        selectAllSvg.setAttribute('viewBox', '0 0 100 100');\n                        selectAll.appendChild(selectAllSvg);\n                        const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox);\n                        selectAllSvg.appendChild(selectAllBox);\n                        const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck);\n                        selectAllSvg.appendChild(selectAllCheck);\n                        selectAll.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            const currentSelected = this.store.getSelected();\n                            if (allSelected) {\n                                const newSelected = currentSelected.filter((s) => {\n                                    for (const o of d.options) {\n                                        if (s === o.value) {\n                                            return false;\n                                        }\n                                    }\n                                    return true;\n                                });\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                            else {\n                                const newSelected = currentSelected.concat(d.options.map((o) => o.value));\n                                for (const o of d.options) {\n                                    if (!this.store.getOptionByID(o.id)) {\n                                        this.callbacks.addOption(o);\n                                    }\n                                }\n                                this.callbacks.setSelected(newSelected, true);\n                                return;\n                            }\n                        });\n                        optgroupActions.appendChild(selectAll);\n                    }\n                    if (d.closable !== 'off') {\n                        const optgroupClosable = document.createElement('div');\n                        optgroupClosable.classList.add(this.classes.optgroupClosable);\n                        const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                        optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100');\n                        optgroupClosableSvg.classList.add(this.classes.arrow);\n                        optgroupClosable.appendChild(optgroupClosableSvg);\n                        const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                        if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {\n                            optgroupClosable.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'open') {\n                            optgroupEl.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else if (d.closable === 'close') {\n                            optgroupEl.classList.add(this.classes.close);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                        }\n                        optgroupLabel.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (optgroupEl.classList.contains(this.classes.close)) {\n                                optgroupEl.classList.remove(this.classes.close);\n                                optgroupEl.classList.add(this.classes.open);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                            }\n                            else {\n                                optgroupEl.classList.remove(this.classes.open);\n                                optgroupEl.classList.add(this.classes.close);\n                                optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                            }\n                        });\n                        optgroupActions.appendChild(optgroupClosable);\n                    }\n                    optgroupEl.appendChild(optgroupLabel);\n                    for (const o of d.options) {\n                        optgroupEl.appendChild(this.option(o));\n                    }\n                    this.content.list.appendChild(optgroupEl);\n                }\n                if (d instanceof Option) {\n                    this.content.list.appendChild(this.option(d));\n                }\n            }\n        }\n        option(option) {\n            if (option.placeholder) {\n                const placeholder = document.createElement('div');\n                placeholder.classList.add(this.classes.option);\n                placeholder.classList.add(this.classes.hide);\n                return placeholder;\n            }\n            const optionEl = document.createElement('div');\n            optionEl.dataset.id = option.id;\n            optionEl.id = option.id;\n            optionEl.classList.add(this.classes.option);\n            optionEl.setAttribute('role', 'option');\n            if (option.class) {\n                option.class.split(' ').forEach((dataClass) => {\n                    optionEl.classList.add(dataClass);\n                });\n            }\n            if (option.style) {\n                optionEl.style.cssText = option.style;\n            }\n            if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {\n                optionEl.innerHTML = this.highlightText(option.html !== '' ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n            }\n            else if (option.html !== '') {\n                optionEl.innerHTML = option.html;\n            }\n            else {\n                optionEl.textContent = option.text;\n            }\n            if (this.settings.showOptionTooltips && optionEl.textContent) {\n                optionEl.setAttribute('title', optionEl.textContent);\n            }\n            if (!option.display) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.disabled) {\n                optionEl.classList.add(this.classes.disabled);\n            }\n            if (option.selected && this.settings.hideSelected) {\n                optionEl.classList.add(this.classes.hide);\n            }\n            if (option.selected) {\n                optionEl.classList.add(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'true');\n                this.main.main.setAttribute('aria-activedescendant', optionEl.id);\n            }\n            else {\n                optionEl.classList.remove(this.classes.selected);\n                optionEl.setAttribute('aria-selected', 'false');\n            }\n            optionEl.addEventListener('click', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const selectedOptions = this.store.getSelected();\n                const element = e.currentTarget;\n                const elementID = String(element.dataset.id);\n                if (option.disabled || (option.selected && !this.settings.allowDeselect)) {\n                    return;\n                }\n                if ((this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||\n                    (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected)) {\n                    return;\n                }\n                let shouldUpdate = false;\n                const before = this.store.getSelectedOptions();\n                let after = [];\n                if (this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = before.filter((o) => o.id !== elementID);\n                    }\n                    else {\n                        after = before.concat(option);\n                    }\n                }\n                if (!this.settings.isMultiple) {\n                    if (option.selected) {\n                        after = [];\n                    }\n                    else {\n                        after = [option];\n                    }\n                }\n                if (!this.callbacks.beforeChange) {\n                    shouldUpdate = true;\n                }\n                if (this.callbacks.beforeChange) {\n                    if (this.callbacks.beforeChange(after, before) === false) {\n                        shouldUpdate = false;\n                    }\n                    else {\n                        shouldUpdate = true;\n                    }\n                }\n                if (shouldUpdate) {\n                    if (!this.store.getOptionByID(elementID)) {\n                        this.callbacks.addOption(option);\n                    }\n                    this.callbacks.setSelected(after.map((o) => o.value), false);\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(after);\n                    }\n                }\n            });\n            return optionEl;\n        }\n        destroy() {\n            this.main.main.remove();\n            this.content.main.remove();\n        }\n        highlightText(str, search, className) {\n            let completedString = str;\n            const regex = new RegExp('(' + search.trim() + ')(?![^<]*>[^<>]*</)', 'i');\n            if (!str.match(regex)) {\n                return str;\n            }\n            const matchStartPosition = str.match(regex).index;\n            const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n            const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n            completedString = completedString.replace(regex, `<mark class=\"${className}\">${originalTextFoundByRegex}</mark>`);\n            return completedString;\n        }\n        moveContentAbove() {\n            const mainHeight = this.main.main.offsetHeight;\n            const contentHeight = this.content.main.offsetHeight;\n            this.main.main.classList.remove(this.classes.openBelow);\n            this.main.main.classList.add(this.classes.openAbove);\n            this.content.main.classList.remove(this.classes.openBelow);\n            this.content.main.classList.add(this.classes.openAbove);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px';\n            this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n            this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n            this.content.main.style.width = containerRect.width + 'px';\n        }\n        moveContentBelow() {\n            this.main.main.classList.remove(this.classes.openAbove);\n            this.main.main.classList.add(this.classes.openBelow);\n            this.content.main.classList.remove(this.classes.openAbove);\n            this.content.main.classList.add(this.classes.openBelow);\n            const containerRect = this.main.main.getBoundingClientRect();\n            this.content.main.style.margin = '-1px 0px 0px 0px';\n            if (this.settings.contentPosition !== 'relative') {\n                this.content.main.style.top = containerRect.top + containerRect.height + window.scrollY + 'px';\n                this.content.main.style.left = containerRect.left + window.scrollX + 'px';\n                this.content.main.style.width = containerRect.width + 'px';\n            }\n        }\n        ensureElementInView(container, element) {\n            const cTop = container.scrollTop + container.offsetTop;\n            const cBottom = cTop + container.clientHeight;\n            const eTop = element.offsetTop;\n            const eBottom = eTop + element.clientHeight;\n            if (eTop < cTop) {\n                container.scrollTop -= cTop - eTop;\n            }\n            else if (eBottom > cBottom) {\n                container.scrollTop += eBottom - cBottom;\n            }\n        }\n        putContent() {\n            const mainHeight = this.main.main.offsetHeight;\n            const mainRect = this.main.main.getBoundingClientRect();\n            const contentHeight = this.content.main.offsetHeight;\n            const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n            if (spaceBelow <= contentHeight) {\n                if (mainRect.top > contentHeight) {\n                    return 'up';\n                }\n                else {\n                    return 'down';\n                }\n            }\n            return 'down';\n        }\n        updateDeselectAll() {\n            if (!this.store || !this.settings) {\n                return;\n            }\n            const selected = this.store.getSelectedOptions();\n            const hasSelectedItems = selected && selected.length > 0;\n            const isMultiple = this.settings.isMultiple;\n            const allowDeselect = this.settings.allowDeselect;\n            const deselectButton = this.main.deselect.main;\n            const hideClass = this.classes.hide;\n            if (allowDeselect && !(isMultiple && !hasSelectedItems)) {\n                deselectButton.classList.remove(hideClass);\n            }\n            else {\n                deselectButton.classList.add(hideClass);\n            }\n        }\n    }\n\n    class Select {\n        constructor(select) {\n            this.listen = false;\n            this.observer = null;\n            this.select = select;\n            this.valueChange = this.valueChange.bind(this);\n            this.select.addEventListener('change', this.valueChange, {\n                passive: true,\n            });\n            this.observer = new MutationObserver(this.observeCall.bind(this));\n            this.changeListen(true);\n        }\n        enable() {\n            this.select.disabled = false;\n        }\n        disable() {\n            this.select.disabled = true;\n        }\n        hideUI() {\n            this.select.tabIndex = -1;\n            this.select.style.display = 'none';\n            this.select.setAttribute('aria-hidden', 'true');\n        }\n        showUI() {\n            this.select.removeAttribute('tabindex');\n            this.select.style.display = '';\n            this.select.removeAttribute('aria-hidden');\n        }\n        changeListen(listen) {\n            this.listen = listen;\n            if (listen) {\n                if (this.observer) {\n                    this.observer.observe(this.select, {\n                        subtree: true,\n                        childList: true,\n                        attributes: true,\n                    });\n                }\n            }\n            if (!listen) {\n                if (this.observer) {\n                    this.observer.disconnect();\n                }\n            }\n        }\n        valueChange(ev) {\n            if (this.listen && this.onValueChange) {\n                this.onValueChange(this.getSelectedValues());\n            }\n            return true;\n        }\n        observeCall(mutations) {\n            if (!this.listen) {\n                return;\n            }\n            let classChanged = false;\n            let disabledChanged = false;\n            let optgroupOptionChanged = false;\n            for (const m of mutations) {\n                if (m.target === this.select) {\n                    if (m.attributeName === 'disabled') {\n                        disabledChanged = true;\n                    }\n                    if (m.attributeName === 'class') {\n                        classChanged = true;\n                    }\n                }\n                if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {\n                    optgroupOptionChanged = true;\n                }\n            }\n            if (classChanged && this.onClassChange) {\n                this.onClassChange(this.select.className.split(' '));\n            }\n            if (disabledChanged && this.onDisabledChange) {\n                this.changeListen(false);\n                this.onDisabledChange(this.select.disabled);\n                this.changeListen(true);\n            }\n            if (optgroupOptionChanged && this.onOptionsChange) {\n                this.changeListen(false);\n                this.onOptionsChange(this.getData());\n                this.changeListen(true);\n            }\n        }\n        getData() {\n            let data = [];\n            const nodes = this.select.childNodes;\n            for (const n of nodes) {\n                if (n.nodeName === 'OPTGROUP') {\n                    data.push(this.getDataFromOptgroup(n));\n                }\n                if (n.nodeName === 'OPTION') {\n                    data.push(this.getDataFromOption(n));\n                }\n            }\n            return data;\n        }\n        getDataFromOptgroup(optgroup) {\n            let data = {\n                id: optgroup.id,\n                label: optgroup.label,\n                selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,\n                selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : 'Select all',\n                closable: optgroup.dataset ? optgroup.dataset.closable : 'off',\n                options: [],\n            };\n            const options = optgroup.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTION') {\n                    data.options.push(this.getDataFromOption(o));\n                }\n            }\n            return data;\n        }\n        getDataFromOption(option) {\n            return {\n                id: option.id,\n                value: option.value,\n                text: option.text,\n                html: option.dataset && option.dataset.html ? option.dataset.html : '',\n                selected: option.selected,\n                display: option.style.display === 'none' ? false : true,\n                disabled: option.disabled,\n                mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,\n                placeholder: option.dataset.placeholder === 'true',\n                class: option.className,\n                style: option.style.cssText,\n                data: option.dataset,\n            };\n        }\n        getSelectedValues() {\n            let values = [];\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroupOptions = o.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            if (option.selected) {\n                                values.push(option.value);\n                            }\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    if (option.selected) {\n                        values.push(option.value);\n                    }\n                }\n            }\n            return values;\n        }\n        setSelected(value) {\n            this.changeListen(false);\n            const options = this.select.childNodes;\n            for (const o of options) {\n                if (o.nodeName === 'OPTGROUP') {\n                    const optgroup = o;\n                    const optgroupOptions = optgroup.childNodes;\n                    for (const oo of optgroupOptions) {\n                        if (oo.nodeName === 'OPTION') {\n                            const option = oo;\n                            option.selected = value.includes(option.value);\n                        }\n                    }\n                }\n                if (o.nodeName === 'OPTION') {\n                    const option = o;\n                    option.selected = value.includes(option.value);\n                }\n            }\n            this.changeListen(true);\n        }\n        updateSelect(id, style, classes) {\n            this.changeListen(false);\n            if (id) {\n                this.select.dataset.id = id;\n            }\n            if (style) {\n                this.select.style.cssText = style;\n            }\n            if (classes) {\n                this.select.className = '';\n                classes.forEach((c) => {\n                    if (c.trim() !== '') {\n                        this.select.classList.add(c.trim());\n                    }\n                });\n            }\n            this.changeListen(true);\n        }\n        updateOptions(data) {\n            this.changeListen(false);\n            this.select.innerHTML = '';\n            for (const d of data) {\n                if (d instanceof Optgroup) {\n                    this.select.appendChild(this.createOptgroup(d));\n                }\n                if (d instanceof Option) {\n                    this.select.appendChild(this.createOption(d));\n                }\n            }\n            this.select.dispatchEvent(new Event('change'));\n            this.changeListen(true);\n        }\n        createOptgroup(optgroup) {\n            const optgroupEl = document.createElement('optgroup');\n            optgroupEl.id = optgroup.id;\n            optgroupEl.label = optgroup.label;\n            if (optgroup.selectAll) {\n                optgroupEl.dataset.selectAll = 'true';\n            }\n            if (optgroup.closable !== 'off') {\n                optgroupEl.dataset.closable = optgroup.closable;\n            }\n            if (optgroup.options) {\n                for (const o of optgroup.options) {\n                    optgroupEl.appendChild(this.createOption(o));\n                }\n            }\n            return optgroupEl;\n        }\n        createOption(info) {\n            const optionEl = document.createElement('option');\n            optionEl.id = info.id;\n            optionEl.value = info.value;\n            optionEl.innerHTML = info.text;\n            if (info.html !== '') {\n                optionEl.setAttribute('data-html', info.html);\n            }\n            if (info.selected) {\n                optionEl.selected = info.selected;\n            }\n            if (info.disabled) {\n                optionEl.disabled = true;\n            }\n            if (info.display === false) {\n                optionEl.style.display = 'none';\n            }\n            if (info.placeholder) {\n                optionEl.setAttribute('data-placeholder', 'true');\n            }\n            if (info.mandatory) {\n                optionEl.setAttribute('data-mandatory', 'true');\n            }\n            if (info.class) {\n                info.class.split(' ').forEach((optionClass) => {\n                    optionEl.classList.add(optionClass);\n                });\n            }\n            if (info.data && typeof info.data === 'object') {\n                Object.keys(info.data).forEach((key) => {\n                    optionEl.setAttribute('data-' + kebabCase(key), info.data[key]);\n                });\n            }\n            return optionEl;\n        }\n        destroy() {\n            this.changeListen(false);\n            this.select.removeEventListener('change', this.valueChange);\n            if (this.observer) {\n                this.observer.disconnect();\n                this.observer = null;\n            }\n            delete this.select.dataset.id;\n            this.showUI();\n        }\n    }\n\n    class SlimSelect {\n        constructor(config) {\n            var _a;\n            this.events = {\n                search: undefined,\n                searchFilter: (opt, search) => {\n                    return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n                },\n                addable: undefined,\n                beforeChange: undefined,\n                afterChange: undefined,\n                beforeOpen: undefined,\n                afterOpen: undefined,\n                beforeClose: undefined,\n                afterClose: undefined,\n            };\n            this.windowResize = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.windowScroll = debounce(() => {\n                if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                    return;\n                }\n                this.render.moveContent();\n            });\n            this.documentClick = (e) => {\n                if (!this.settings.isOpen) {\n                    return;\n                }\n                if (e.target && !hasClassInTree(e.target, this.settings.id)) {\n                    this.close(e.type);\n                }\n            };\n            this.windowVisibilityChange = () => {\n                if (document.hidden) {\n                    this.close();\n                }\n            };\n            this.selectEl = (typeof config.select === 'string' ? document.querySelector(config.select) : config.select);\n            if (!this.selectEl) {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Could not find select element'));\n                }\n                return;\n            }\n            if (this.selectEl.tagName !== 'SELECT') {\n                if (config.events && config.events.error) {\n                    config.events.error(new Error('Element isnt of type select'));\n                }\n                return;\n            }\n            if (this.selectEl.dataset.ssid) {\n                this.destroy();\n            }\n            this.settings = new Settings(config.settings);\n            const debounceEvents = ['afterChange', 'beforeOpen', 'afterOpen', 'beforeClose', 'afterClose'];\n            for (const key in config.events) {\n                if (!config.events.hasOwnProperty(key)) {\n                    continue;\n                }\n                if (debounceEvents.indexOf(key) !== -1) {\n                    this.events[key] = debounce(config.events[key], 100);\n                }\n                else {\n                    this.events[key] = config.events[key];\n                }\n            }\n            this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n            this.settings.isMultiple = this.selectEl.multiple;\n            this.settings.style = this.selectEl.style.cssText;\n            this.settings.class = this.selectEl.className.split(' ');\n            this.select = new Select(this.selectEl);\n            this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n            this.select.hideUI();\n            this.select.onValueChange = (values) => {\n                this.setSelected(values);\n            };\n            this.select.onClassChange = (classes) => {\n                this.settings.class = classes;\n                this.render.updateClassStyles();\n            };\n            this.select.onDisabledChange = (disabled) => {\n                if (disabled) {\n                    this.disable();\n                }\n                else {\n                    this.enable();\n                }\n            };\n            this.select.onOptionsChange = (data) => {\n                this.setData(data);\n            };\n            this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', config.data ? config.data : this.select.getData());\n            if (config.data) {\n                this.select.updateOptions(this.store.getData());\n            }\n            const callbacks = {\n                open: this.open.bind(this),\n                close: this.close.bind(this),\n                addable: this.events.addable ? this.events.addable : undefined,\n                setSelected: this.setSelected.bind(this),\n                addOption: this.addOption.bind(this),\n                search: this.search.bind(this),\n                beforeChange: this.events.beforeChange,\n                afterChange: this.events.afterChange,\n            };\n            this.render = new Render(this.settings, this.store, callbacks);\n            this.render.renderValues();\n            this.render.renderOptions(this.store.getData());\n            const selectAriaLabel = this.selectEl.getAttribute('aria-label');\n            const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby');\n            if (selectAriaLabel) {\n                this.render.main.main.setAttribute('aria-label', selectAriaLabel);\n            }\n            else if (selectAriaLabelledBy) {\n                this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy);\n            }\n            if (this.selectEl.parentNode) {\n                this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n            }\n            document.addEventListener('click', this.documentClick);\n            window.addEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.addEventListener('scroll', this.windowScroll, false);\n            }\n            document.addEventListener('visibilitychange', this.windowVisibilityChange);\n            if (this.settings.disabled) {\n                this.disable();\n            }\n            if (this.settings.alwaysOpen) {\n                this.open();\n            }\n            this.selectEl.slim = this;\n        }\n        enable() {\n            this.settings.disabled = false;\n            this.select.enable();\n            this.render.enable();\n        }\n        disable() {\n            this.settings.disabled = true;\n            this.select.disable();\n            this.render.disable();\n        }\n        getData() {\n            return this.store.getData();\n        }\n        setData(data) {\n            const selected = this.store.getSelected();\n            const err = this.store.validateDataArray(data);\n            if (err) {\n                if (this.events.error) {\n                    this.events.error(err);\n                }\n                return;\n            }\n            this.store.setData(data);\n            const dataClean = this.store.getData();\n            this.select.updateOptions(dataClean);\n            this.render.renderValues();\n            this.render.renderOptions(dataClean);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        getSelected() {\n            return this.store.getSelected();\n        }\n        setSelected(value, runAfterChange = true) {\n            const selected = this.store.getSelected();\n            this.store.setSelectedBy('value', Array.isArray(value) ? value : [value]);\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            if (this.render.content.search.input.value !== '') {\n                this.search(this.render.content.search.input.value);\n            }\n            else {\n                this.render.renderOptions(data);\n            }\n            if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        addOption(option) {\n            const selected = this.store.getSelected();\n            if (!this.store.getDataOptions().some((o) => { var _a; return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text); })) {\n                this.store.addOption(option);\n            }\n            const data = this.store.getData();\n            this.select.updateOptions(data);\n            this.render.renderValues();\n            this.render.renderOptions(data);\n            if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n                this.events.afterChange(this.store.getSelectedOptions());\n            }\n        }\n        open() {\n            if (this.settings.disabled || this.settings.isOpen) {\n                return;\n            }\n            if (this.events.beforeOpen) {\n                this.events.beforeOpen();\n            }\n            this.render.open();\n            if (this.settings.showSearch) {\n                this.render.searchFocus();\n            }\n            this.settings.isOpen = true;\n            setTimeout(() => {\n                if (this.events.afterOpen) {\n                    this.events.afterOpen();\n                }\n                if (this.settings.isOpen) {\n                    this.settings.isFullOpen = true;\n                }\n            }, this.settings.timeoutDelay);\n            if (this.settings.contentPosition === 'absolute') {\n                if (this.settings.intervalMove) {\n                    clearInterval(this.settings.intervalMove);\n                }\n                this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n            }\n        }\n        close(eventType = null) {\n            if (!this.settings.isOpen || this.settings.alwaysOpen) {\n                return;\n            }\n            if (this.events.beforeClose) {\n                this.events.beforeClose();\n            }\n            this.render.close();\n            if (this.render.content.search.input.value !== '') {\n                this.search('');\n            }\n            this.render.mainFocus(eventType);\n            this.settings.isOpen = false;\n            this.settings.isFullOpen = false;\n            setTimeout(() => {\n                if (this.events.afterClose) {\n                    this.events.afterClose();\n                }\n            }, this.settings.timeoutDelay);\n            if (this.settings.intervalMove) {\n                clearInterval(this.settings.intervalMove);\n            }\n        }\n        search(value) {\n            if (this.render.content.search.input.value !== value) {\n                this.render.content.search.input.value = value;\n            }\n            if (!this.events.search) {\n                this.render.renderOptions(value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n                return;\n            }\n            this.render.renderSearching();\n            const searchResp = this.events.search(value, this.store.getSelectedOptions());\n            if (searchResp instanceof Promise) {\n                searchResp\n                    .then((data) => {\n                    this.render.renderOptions(this.store.partialToFullData(data));\n                })\n                    .catch((err) => {\n                    this.render.renderError(typeof err === 'string' ? err : err.message);\n                });\n                return;\n            }\n            else if (Array.isArray(searchResp)) {\n                this.render.renderOptions(this.store.partialToFullData(searchResp));\n            }\n            else {\n                this.render.renderError('Search event must return a promise or an array of data');\n            }\n        }\n        destroy() {\n            document.removeEventListener('click', this.documentClick);\n            window.removeEventListener('resize', this.windowResize, false);\n            if (this.settings.openPosition === 'auto') {\n                window.removeEventListener('scroll', this.windowScroll, false);\n            }\n            document.removeEventListener('visibilitychange', this.windowVisibilityChange);\n            this.store.setData([]);\n            this.render.destroy();\n            this.select.destroy();\n        }\n    }\n\n    return SlimSelect;\n\n}));\n"],"names":["$6b5f202d1456c0af$var$api_key","$6b5f202d1456c0af$var$BASE_URL","$6b5f202d1456c0af$var$url","$f753f16ae3da2a89$exports","factory","generateID","Math","random","toString","substring","debounce","func","wait","immediate","timeout","args","context","self","callNow","clearTimeout","setTimeout","apply","isEqual","a","b","JSON","stringify","Settings","constructor","settings","id","style","class","isMultiple","isOpen","isFullOpen","intervalMove","disabled","undefined","alwaysOpen","showSearch","ariaLabel","searchPlaceholder","searchText","searchingText","searchHighlight","closeOnSelect","contentLocation","document","body","contentPosition","openPosition","placeholderText","allowDeselect","hideSelected","showOptionTooltips","minSelected","maxSelected","timeoutDelay","maxValuesShown","maxValuesMessage","Optgroup","optgroup","label","selectAll","selectAllText","closable","options","o","push","Option","option","value","text","html","selected","display","mandatory","placeholder","data","Store","type","selectType","setData","validateDataArray","Array","isArray","Error","dataObj","validateOption","partialToFullData","dataFinal","forEach","optOptions","length","setSelectedBy","getSelected","getData","filter","getDataOptions","addOption","concat","selectedType","selectedValues","firstOption","hasSelected","includes","selectedOptions","getSelectedOptions","opt","getSelectedIDs","selectedIDs","op","getOptgroupByID","getOptionByID","getSelectType","getFirstOption","search","searchFilter","trim","includeOptgroup","dataSearch","Render","store","callbacks","classes","main","values","single","max","valueText","valueDelete","valueOut","deselect","deselectPath","arrow","arrowClose","arrowOpen","content","openAbove","openBelow","searchHighlighter","searching","addable","addablePath","list","optgroupLabel","optgroupLabelText","optgroupActions","optgroupSelectAll","optgroupSelectAllBox","optgroupSelectAllCheck","optgroupClosable","optionDelete","highlighted","open","close","error","hide","mainDiv","contentDiv","updateClassStyles","updateAriaAttributes","appendChild","enable","classList","remove","input","disable","add","path","setAttribute","moveContent","selectedId","selectedOption","querySelector","ensureElementInView","className","removeAttribute","cssText","c","role","_a","createElement","dataset","tabIndex","onkeydown","e","key","highlight","click","onclick","stopPropagation","shouldDelete","before","beforeChange","setSelected","updateDeselectAll","afterChange","deselectSvg","createElementNS","arrowPath","svg","mainFocus","eventType","focus","preventScroll","placeholderOption","innerHTML","renderValues","renderSingleValue","renderMultipleValues","selectedSingle","singleValue","innerText","outerHTML","currentNodes","childNodes","textContent","replace","removeNodes","i","node","getAttribute","found","n","hasChildNodes","contains","removeChild","d","shouldAdd","String","multipleValue","insertBefore","insertAdjacentElement","deleteDiv","preventDefault","after","deleteSvg","deletePath","searchDiv","listDiv","moveContentBelow","moveContentAbove","putContent","searchReturn","readOnly","oninput","target","ctrlKey","plus","plusPath","inputValue","runFinish","oo","newOption","addableValue","Promise","then","searchFocus","getOptions","notPlaceholder","notDisabled","notHidden","query","from","querySelectorAll","dir","prevOption","prevParent","parentElement","selectOption","selectParent","renderError","errorDiv","renderSearching","searchingDiv","renderOptions","noResults","optgroupEl","allSelected","selectAllSvg","selectAllBox","selectAllCheck","addEventListener","currentSelected","newSelected","s","map","optgroupClosableSvg","optgroupClosableArrow","some","optionEl","split","dataClass","highlightText","elementID","element","currentTarget","shouldUpdate","destroy","str","regex","RegExp","match","matchStartPosition","index","matchEndPosition","originalTextFoundByRegex","completedString","mainHeight","offsetHeight","contentHeight","containerRect","getBoundingClientRect","margin","top","height","window","scrollY","left","scrollX","width","container","cTop","scrollTop","offsetTop","cBottom","clientHeight","eTop","eBottom","mainRect","spaceBelow","innerHeight","hasSelectedItems","deselectButton","hideClass","Select","select","listen","observer","valueChange","bind","passive","MutationObserver","observeCall","changeListen","hideUI","showUI","observe","subtree","childList","attributes","disconnect","ev","onValueChange","getSelectedValues","mutations","classChanged","disabledChanged","optgroupOptionChanged","m","attributeName","nodeName","onClassChange","onDisabledChange","onOptionsChange","getDataFromOptgroup","getDataFromOption","selectall","selectalltext","updateSelect","updateOptions","createOptgroup","createOption","dispatchEvent","Event","info","optionClass","Object","keys","kebabCase","result","toLowerCase","toUpperCase","removeEventListener","config","events","indexOf","beforeOpen","afterOpen","beforeClose","afterClose","windowResize","render","windowScroll","documentClick","hasClassInTree","hasClass","parentByClass","parentNode","windowVisibilityChange","hidden","selectEl","tagName","ssid","debounceEvents","hasOwnProperty","multiple","selectAriaLabel","selectAriaLabelledBy","nextSibling","slim","err","dataClean","runAfterChange","clearInterval","setInterval","searchResp","catch","message","$1f0dc3b9307be026$var$ref","catInfo","loader","fetch","response","ok","status","json","el","name","insertAdjacentHTML","__esModule","default","finally","breedId","res","url","breeds","description","temperament"],"version":3,"file":"index.ff925a90.js.map"}